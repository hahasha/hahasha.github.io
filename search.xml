<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>css实现经典布局</title>
    <url>/2020/06/22/css%E5%AE%9E%E7%8E%B0%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><p>三栏布局的特点是：<strong>两边定宽、中间自适应。</strong><br>这里主要介绍三栏布局的两种实现方式，一种是圣杯布局，来源于文章<em>In Search of the Holy Grail</em>，另一种是双飞翼布局，来源于淘宝UED。</p>
<h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><p>特点：</p>
<ol>
<li>header 和 footer 宽度占满全屏；</li>
<li>中间部分是一个三栏布局，两侧定宽，中间栏自适应；</li>
<li>中间栏在DOM结构上优先，以便先行渲染；</li>
<li>中间部分的高度是三栏中最高部分的高度。</li>
</ol>
<p>实现</p>
<ol>
<li><p>flex</p>
</li>
<li><p>grid</p>
</li>
<li><p>浮动</p>
</li>
</ol>
<h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习指南</title>
    <url>/2020/06/12/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p><img src="http://qcbnjhr05.bkt.clouddn.com/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.jpg" alt=""></p>
<a id="more"></a>
<h4 id="一、HTML-CSS"><a href="#一、HTML-CSS" class="headerlink" title="一、HTML/CSS"></a>一、HTML/CSS</h4><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><h5 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h5><ol>
<li>水平垂直居中的方案</li>
<li>实现经典布局（圣杯、双飞翼）</li>
<li>使用css绘制几何图形（三角形、圆形、菱形等）</li>
</ol>
<h4 id="二、JavaScript"><a href="#二、JavaScript" class="headerlink" title="二、JavaScript"></a>二、JavaScript</h4><h4 id="三、运行环境"><a href="#三、运行环境" class="headerlink" title="三、运行环境"></a>三、运行环境</h4><h4 id="四、计算机基础"><a href="#四、计算机基础" class="headerlink" title="四、计算机基础"></a>四、计算机基础</h4><h4 id="五、前端工程化"><a href="#五、前端工程化" class="headerlink" title="五、前端工程化"></a>五、前端工程化</h4><h4 id="六、框架和类库"><a href="#六、框架和类库" class="headerlink" title="六、框架和类库"></a>六、框架和类库</h4><h4 id="七、数据结构和算法"><a href="#七、数据结构和算法" class="headerlink" title="七、数据结构和算法"></a>七、数据结构和算法</h4><h4 id="八、后端技能"><a href="#八、后端技能" class="headerlink" title="八、后端技能"></a>八、后端技能</h4><h4 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h4>]]></content>
      <tags>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>css实现水平垂直居中</title>
    <url>/2020/06/22/css%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<p>一个块级元素水平垂直居中的实现可以分为两大类，一类是元素固定宽高，另一类是元素不定宽高。</p>
<a id="more"></a>
<h3 id="固定宽高"><a href="#固定宽高" class="headerlink" title="固定宽高"></a>固定宽高</h3><p>为了模拟固定宽高元素实现居中效果，我们假设html部分的代码为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css部分公共的代码为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="absolute-margin-auto"><a href="#absolute-margin-auto" class="headerlink" title="absolute + margin: auto"></a>absolute + margin: auto</h4><p>实现代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现原理： 利用<code>margin: auto</code>的填充机制，其填充规则如下：</p>
<ol>
<li>如果一侧定值，一侧auto，则auto为剩余空间；</li>
<li>如果两侧均为auto，则平分剩余空间。</li>
</ol>
<p>但是触发 margin: auto 计算有一个前提条件：当 width 或 height 为 auto 时，元素是具有对应方向的自动填充特性的。即当宽高不受限时，元素尺寸将自动填充父级元素的可用尺寸。</p>
<h4 id="absolute-负margin"><a href="#absolute-负margin" class="headerlink" title="absolute + 负margin"></a>absolute + 负margin</h4><p>实现代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现原理：绝对定位元素的top、left的百分比值是相对于其块级父元素的宽高，因此可以利用这一特性来实现子元素居中显示，但是绝对定位是基于元素的左上角，而我们想要的效果是基于元素的中心居中显示。为了修正这一问题，我们给 margin 设置一个负的偏移值，这个偏移值就是子元素宽高的一半，这样就可以实现基于子元素的中心居中了。</p>
<p>我们还可以使用css3提供的<code>calc()</code>函数来简化部分代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="不定宽高"><a href="#不定宽高" class="headerlink" title="不定宽高"></a>不定宽高</h3><p>为了模拟不定宽高元素实现居中效果，我们假设html部分的代码为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>112233<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css部分公共的代码为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="absolute-transform"><a href="#absolute-transform" class="headerlink" title="absolute + transform"></a>absolute + transform</h4><p>实现代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现原理：该方式还是利用的绝对定位，但是当子元素的宽高未知时，就不能使用负边距解决定位的偏移问题。此时可以利用transform的translate属性修复中心的偏移问题。因为 <strong>translate 的百分比是相对于元素自身的宽高</strong>，设置 translate(-50%, -50%) 就相当于给元素设置了水平和垂直方向的负偏移值，偏移值的大小就是元素宽高的一半。</p>
<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>实现代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h4><p>实现代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">line-height</span>: initial;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现原理：该方式是利用行内元素的居中属性。使用 text-align 实现水平居中，垂直居中则是利用 line-height + vertical-align 实现。我们知道要让单行文本垂直居中可以通过设置 line-height 属性实现，而<strong>行高可以实现垂直居中的原因在于CSS中行距的上下等分机制</strong>。其实 line-height 也可以让多行文本或者图片等替换元素垂直居中。只是需要 vertical-align 的帮助。具体实现原理可解释为：</p>
<ol>
<li>多行文本使用一个标签包裹，并将 display 设置为 inline-block。这样做的目的是在.wrap元素内产生一个“行框盒子”，而每一个“行框盒子”都会附带一个“空白幽灵节点”，有了这个节点，line-height: 300px 就有了作用对象，相当于在.main 元素前面撑起了一个高度为300px 宽度为0 的内联元素。</li>
<li>因为内联元素默认是基线对齐，所以通过给.main元素设置 vertical-align: middle 来调整多行文本的垂直居中位置。vertical-align: middle 中的middle指的是基线往上二分之一 x-height 的位置，可以近似理解为 x 字符交叉点的位置。</li>
</ol>
<h4 id="table-cell"><a href="#table-cell" class="headerlink" title="table-cell"></a>table-cell</h4><p>实现代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现原理：table可以实现水平垂直居中效果，曾经是页面布局的常用方法，但是会增加很多冗余代码。display 的 table-cell 属性可以将元素作为一个表格的单元格显示（类似于&lt;td&gt;），利用这一特性也可以实现元素居中效果，并且不会产生冗余代码。</p>
<h4 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h4><p>实现代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">  <span class="attribute">justify-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现原理：CSS 新出的 grid（网格）布局也可以实现水平垂直居中。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">是否固定宽高</th>
<th align="center">PC兼容性</th>
<th align="center">移动端兼容性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">absolute + margin auto</td>
<td align="center">是</td>
<td align="center">ie7+, chrome4+, firefox2+</td>
<td align="center">安卓2.3+, iOS6+</td>
</tr>
<tr>
<td align="center">absolute + 负margin</td>
<td align="center">是</td>
<td align="center">ie6+, chrome4+, firefox2+</td>
<td align="center">安卓2.3+, iOS6+</td>
</tr>
<tr>
<td align="center">absolute + calc</td>
<td align="center">是</td>
<td align="center">ie9+, chrome19+, firefox4+</td>
<td align="center">安卓4.4+, iOS6+</td>
</tr>
<tr>
<td align="center">absolute + transform</td>
<td align="center">否</td>
<td align="center">ie9+, chrome4+, firefox3.5+</td>
<td align="center">安卓3+, iOS6+</td>
</tr>
<tr>
<td align="center">line-height</td>
<td align="center">否</td>
<td align="center">ie6+, chrome4+, firefox2+</td>
<td align="center">安卓2.3+, iOS6+</td>
</tr>
<tr>
<td align="center">table-cell</td>
<td align="center">否</td>
<td align="center">ie8+, chrome4+, firefox2+</td>
<td align="center">安卓2.3+, iOS6+</td>
</tr>
<tr>
<td align="center">flex</td>
<td align="center">否</td>
<td align="center">ie10+, chrome4+, firefox2+</td>
<td align="center">安卓2.3+, iOS6+</td>
</tr>
<tr>
<td align="center">grid</td>
<td align="center">否</td>
<td align="center">ie10+, chrome57+, firefox52+</td>
<td align="center">安卓6+, iOS10.3+</td>
</tr>
</tbody></table>
<p><strong>1. 移动端几乎可以完全使用 flex。</strong><br><strong>2. pc端如果不需要考虑IE7，推荐利用绝对定位的流体特性和 margin: auto 的自动分配特性实现居中。</strong></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用css绘制几何图形（三角形、圆形、菱形等）</title>
    <url>/2020/06/22/%E4%BD%BF%E7%94%A8css%E7%BB%98%E5%88%B6%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%EF%BC%88%E4%B8%89%E8%A7%92%E5%BD%A2%E3%80%81%E5%9C%86%E5%BD%A2%E3%80%81%E8%8F%B1%E5%BD%A2%E7%AD%89%EF%BC%89/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>手写jQuery系列</title>
    <url>/2020/06/14/%E6%89%8B%E5%86%99jQuery%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试篇</title>
    <url>/2020/06/16/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%AF%87/</url>
    <content><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ul>
<li>viewport</li>
<li>元信息标签（head、title、meta）的作用</li>
<li>HTML5离线缓存原理<a id="more"></a>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3></li>
<li>盒模型</li>
</ul>
<blockquote>
<p>在浏览器中，每一个DOM结点渲染后，都会在屏幕上占用一个方形区域，这个方形区域就是盒子，这种渲染方式就称为盒模型。<br>盒模型一共有四类属性，分别是width/height、padding、border和margin。</p>
</blockquote>
<ul>
<li>说一说BFC</li>
<li>display和opacity的区别？</li>
<li>css选择器优先级确定</li>
<li>css伪类和伪元素</li>
<li>有哪些样式可以被继承？</li>
<li>什么是文档流？脱离文档流的方式都有哪些？它们有什么不同？</li>
</ul>
<blockquote>
<p>所谓文档流就是DOM结点排版布局过程中，元素会自动从左往右，从上往下的流式排列。在正常布局下，块级元素会自己占一行，有几个块级元素就会有几行。而行内元素才会从左到右排列。<br>absolute、fixed和浮动<br>浮动和绝对定位都会脱离文档流，但是使用float脱离文档流时，其他盒子会无视这个元素，但是盒子内的文本依然会为这个元素让出位置，环绕在周围，而对于使用absolute脱离文档流时，其他盒子与盒子内的文本都会无视它。</p>
</blockquote>
<ul>
<li>外边距折叠是什么意思？</li>
</ul>
<blockquote>
<p>如果两个盒子都设置了外边距margin，在排列时并不会把两个盒子margin值的和作为它们的间距，而是取两者中的较大值。</p>
</blockquote>
<ul>
<li>水平垂直居中的方式有哪些？都有哪些优缺点？</li>
</ul>
<blockquote>
<p><span class="pink">元素定高：</span><br>（1）absolute + 负margin<br>（2）absolute + 各个方向的都是0 + margin auto<br><span class="pink">元素不定高：</span><br>（1）absolute + transform<br>（2）table-cell +  text-align +  vertical-align<br>（3）flex</p>
</blockquote>
<ul>
<li>绝对定位坐标的参考值是谁？宽度和高度的参考值又是谁？</li>
<li>清除浮动的方法有哪些？</li>
<li>css模块化方案？如何配置按需加载？如何防止css阻塞渲染？</li>
<li>postCss是什么？和Sass、Less、Stylus的异同？</li>
<li>如何使用css画一个三角形？</li>
<li>是否了解媒体查询？它的原理是什么？</li>
<li>逻辑像素和物理像素的区别？</li>
<li>响应式布局方案有哪些？</li>
<li>em 和 rem 这两种相对单位有什么不同？</li>
</ul>
<blockquote>
<p><span class="pink">em 是相对于当前元素字体尺寸。</span>举例来说，如果当前元素的字体是20px，那么当前元素中的1em就等于20px。<br><span class="pink">rem（即root em），是以根节点的字体大小作为基准值进行长度计算。</span>一般认为网页中的根节点是 html 元素，所以采用 html 元素的 font-size 来做屏幕适配。</p>
</blockquote>
<ul>
<li>什么是 css-reset？为什么要做 css-reset？</li>
<li>你平时写样式会遵从哪些规范？举几个例子</li>
</ul>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h4><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><ul>
<li>js数据类型有哪些？</li>
</ul>
<blockquote>
<p>Number、String、Boolean、Undefined、Null、Symbol、Object</p>
</blockquote>
<ul>
<li>typeof 能返回哪几种数据类型？</li>
</ul>
<blockquote>
<p>number、string、boolean、undefined、symbol<br>object<br>function</p>
</blockquote>
<ul>
<li>基本类型和引用类型的区别？</li>
</ul>
<blockquote>
<p>基本类型：<br>（1）值不可改变；<br>（2）基本类型的比较是值的比较；<br>（3）值存在栈中。<br>引用类型：<br>（1）值是可变的，可以添加、删除属性；<br>（2）引用类型的比较是引用地址的比较；<br>（3）引用地址存储在栈中，实际数据存放在堆中；</p>
</blockquote>
<ul>
<li>深拷贝和浅拷贝的区别？</li>
</ul>
<blockquote>
<p><span class="pink">浅拷贝</span>：浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是引用类型，拷贝的就是内存地址。数组的<span class="pink">concat </span>和 <span class="pink">slice </span>方法是浅拷贝，对象的<span class="pink">Object.assign</span>也是浅拷贝。<br><span class="pink">深拷贝</span>：会开辟一个新的堆空间，保存拷贝的数据，另外生成一个新的引用地址赋给对象名。可以使用<span class="pink">JSON.stringify、JSON.parse</span>实现深拷贝。或者递归实现。</p>
</blockquote>
<ul>
<li>说一下常见的隐式类型转换</li>
</ul>
<blockquote>
<p>if、==、逻辑运算、+拼接字符串</p>
</blockquote>
<ul>
<li>如何准确判断数组类型？</li>
</ul>
<blockquote>
<p>（1）instanceof（检测原理是判断对象的原型链是否指向其构造函数的prototype）<br>（2）constructor（arr.constructor === Array）<br>（3）Object.prototype.toString（Object.prototype.toString.call(arr) === ‘[object Array]’ ）<br>（4）Array.isArray()</p>
</blockquote>
<ul>
<li>出现小数精度丢失的原因？</li>
</ul>
<h5 id="原型-amp-原型链"><a href="#原型-amp-原型链" class="headerlink" title="原型&amp;原型链"></a>原型&amp;原型链</h5><ul>
<li>怎么理解原型设计模式？</li>
</ul>
<blockquote>
<p>原型的作用就是给构造函数的每一个对象添加统一的方法，在原型中定义的方法和属性都是被所以实例对象所共享。</p>
</blockquote>
<ul>
<li>js中的原型规则</li>
</ul>
<blockquote>
<p>（1）所有的引用类型，都有一个__proto__ 属性；<br>（2）所有函数，都具有一个prototype属性；<br>（3）所有的引用类型的_proto_指向其构造函数的prototype；<br>（4）当试图获取对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的_proto_（即它的构造函数的prototype）中去寻找；</p>
</blockquote>
<ul>
<li>说一说实现继承的几种方式以及它们的优缺点？</li>
</ul>
<blockquote>
<p><span class="pink">借用构造函数</span><br><span class="pink">组合继承</span><br><span class="pink">原型继承</span></p>
</blockquote>
<ul>
<li>instanceof 的实现原理？手动实现instanceof</li>
<li>描述new一个对象的过程？手动实现一个new操作符</li>
</ul>
<h5 id="作用域-amp-闭包"><a href="#作用域-amp-闭包" class="headerlink" title="作用域&amp;闭包"></a>作用域&amp;闭包</h5><ul>
<li>词法作用域和动态作用域</li>
<li>怎么理解js的作用域和作用域链？</li>
<li>什么是js的执行上下文？</li>
<li>this在不同场景下的取值</li>
</ul>
<blockquote>
<p>（1）普通对象中：指向window<br>（2）call、bind、apply：指向传入的对象<br>（3）对象方法中：指向对象本身<br>（4）class方法中：指向实例<br>（5）箭头函数中：指向定义时所在的对象。</p>
</blockquote>
<ul>
<li>call、apply、bind</li>
<li>闭包是什么？开发中的应用场景？</li>
</ul>
<blockquote>
<p><span class="pink">闭包就是能够读取其他函数内部变量的的函数。</span><br>闭包的两个特点：<br>（1）可以读取函数内部的变量。<br>（2）让这些变量的值始终保持在内存中。<br>开发中的应用场景：<br>（1）柯里化<br>（2）单例模式</p>
</blockquote>
<ul>
<li>堆栈溢出和内存泄漏的原理？如何防止？</li>
</ul>
<h5 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h5><ul>
<li>同步和异步的区别？</li>
</ul>
<blockquote>
<p>同步会阻塞代码执行，异步不会。</p>
</blockquote>
<ul>
<li>前端使用异步的场景有哪些？</li>
</ul>
<blockquote>
<p>（1）网络请求<br>（2）定时任务<br>（3）事件绑定<br>（4）回调函数<br>（5）Promise</p>
</blockquote>
<ul>
<li>详细描述Event Loop机制</li>
</ul>
<blockquote>
<p>（1）同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。<br>（2）主线程之外，还存在一个”任务队列”。当指定的事情完成时，Event Table会将这个函数移入Event Queue。<br>（3）主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。<br>（4）上述过程会不断重复，也就是常说的Event Loop(事件循环)。</p>
</blockquote>
<ul>
<li>js如何实现异步编程？</li>
</ul>
<blockquote>
<p>callback<br>promise<br>generator函数<br>async、await</p>
</blockquote>
<ul>
<li>node与浏览器 Event Loop 的差异？</li>
<li>如何在保证页面运行流畅的情况下处理海量数据？</li>
</ul>
<h5 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h5><h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h5><ul>
<li>symbol</li>
<li>class</li>
<li>Promise</li>
<li>let const</li>
<li>set map</li>
<li>proxy</li>
</ul>
<h4 id="JS进阶"><a href="#JS进阶" class="headerlink" title="JS进阶"></a>JS进阶</h4><h5 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h5><h5 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h5><ul>
<li>手写简易ajax</li>
<li>ajax常用插件</li>
</ul>
<h5 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h5><ul>
<li>事件节流和防抖的区别？</li>
</ul>
<h5 id="web安全"><a href="#web安全" class="headerlink" title="web安全"></a>web安全</h5><ul>
<li>常见的web前端攻击方式有哪些？</li>
</ul>
<h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><ul>
<li>前端常用的设计模式有哪些？</li>
<li>发布订阅者模式和观察者模式的异同以及实际应用</li>
<li>说出几种设计模式在开发中的实际应用</li>
</ul>
<h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><h5 id="git"><a href="#git" class="headerlink" title="git"></a>git</h5><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><ul>
<li>linux常用命令有哪些？</li>
</ul>
<h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><h5 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h5><p><strong>HTTP</strong></p>
<ul>
<li>从输入一个url到整个页面渲染的过程？</li>
</ul>
<blockquote>
<p><span class="pink">输入url开启新的网络请求线程<br>开启网络线程到发出一个完整的HTTP请求（DNS查询、TCP连接、五层协议栈）<br>服务器接收到请求到对应后台接受到请求（负载均衡、安全拦截）<br>前后台http交互（报文结构、常用头部、cookie、跨域、web安全、http缓存、 https）<br>浏览器接收到http数据包后的解析流程（生成DOM树、解析CSS生成CSS规则树、合并成render树、layout、painting渲染、复合图层的合并、外链处理、加载顺序）<br>JS引擎解析过程（JS的解释、预处理、执行上下文、作用域链、 this、回收机制）</span></p>
</blockquote>
<ul>
<li>怎么理解多进程的浏览器和多线程的浏览器内核？</li>
<li>DNS的作用？DNS解析的详细过程？DNS优化？</li>
<li>说一下三次握手和四次挥手的详细过程？为什么要使用这种机制？</li>
<li>get、post的区别？</li>
<li>介绍一下TCP/IP的五层模型及对应协议</li>
<li>HTTP请求报文和响应报文的具体组成？说一说常见的请求头和响应头</li>
<li>HTTP请求有哪些请求方法？区别是什么？</li>
<li>HTTP常见的状态码有哪些？都代表什么含义？它们的作用是什么？</li>
<li>什么是负载均衡？</li>
<li>什么是同源策略？怎么解决跨域？</li>
<li>说一说cookie</li>
<li>了解HTTP2.0吗？</li>
<li>HTTPS的加密原理？如何开启HTTPS？</li>
<li>HTTP缓存</li>
<li>WebSocket协议的底层原理？与HTTP的区别？</li>
</ul>
<p><strong>DOM</strong><br><strong>BOM</strong></p>
<ul>
<li>如何识别浏览器的类型</li>
</ul>
<p><strong>存储</strong></p>
<ul>
<li>cookie、localstorage、sessionstorage的区别？</li>
</ul>
<blockquote>
<p><span class="pink">（1）生命周期</span><br>cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效<br>localStorage：除非被手动清除，否则将会永久保存。<br>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。<br><span class="pink">（2）存储容量</span><br>cookie：4KB左右<br>localStorage和sessionStorage：可以保存5MB的信息。<br><span class="pink">（3）http请求</span><br>cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题<br>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信<br><span class="pink">（4）易用性</span><br>cookie：源生的Cookie接口不友好<br>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</p>
</blockquote>
<h5 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h5><h3 id="框架和类库"><a href="#框架和类库" class="headerlink" title="框架和类库"></a>框架和类库</h3><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><ul>
<li><strong>说说你对Vue源码有哪些研究？</strong></li>
</ul>
<blockquote>
<p><span class="pink">1.了解了一个vue实例的初始化过程</span><br>new Vue() &gt;&gt; 调用_init方法完成初始化data、props、computed等 &gt;&gt; 调用实例的$mount方法挂载实例（挂载的目标就是把模板渲染成最终的DOM）<br>挂载过程：调用实例的_render方法（用来将实例渲染成虚拟Node）&gt;&gt; 调用实例的_update方法（在update里调用patch方法将VNode渲染成真正的DOM）<br><span class="pink">2.组件化</span><br>通过createComponent创建组件VNode &gt;&gt; 执行patch方法将VNode转换成真正的DOM节点（patch最后执行insert方法完成组件DOM的插入，如果patch过程中又创建了子组件，那么DOM的插入顺序是先子后父）<br>组件注册：全局注册和局部注册<br>异步组件：异步组件实现的本质是 2 次渲染，除了 0 delay 的高级异步组件第一次直接渲染成 loading 组件外，其它都是第一次渲染生成一个注释节点，当异步获取组件成功后，再通过 forceRender 强制重新渲染，这样就能正确渲染出我们异步加载的组件了。<br><span class="pink">3.响应式原理</span><br><span class="pink">4.模板编译</span><br><span class="pink">5.还有一些内置组件的实现（slot、keep-alive、transition、transition-group） </span></p>
</blockquote>
<ul>
<li><strong>Vue实现双向绑定的原理？</strong></li>
</ul>
<blockquote>
<p><span class="pink">采用数据劫持结合发布-订阅者模式的方式，通过ES5的Object.defineProperty()方法来给各个属性添加getter和setter，在数据变动时发布消息给订阅者，触发相应的监听回调。</span> 主要由4个部分实现:</p>
<ol>
<li>Observer监听器，用来劫持和监听属性。</li>
<li>Compile指令解析器，它有两个作用，一是初始化渲染页面，将模板中的变量都替换成数据。第二个作用是绑定更新函数。</li>
<li>Watcher订阅者，它是连接Observer和Compile的桥梁，主要的任务是用来派发更新。</li>
<li>Dep订阅器 ，它是依赖收集的核心，用来管理Watcher订阅者，当触发setter时，通知相应的订阅者做相应的逻辑处理。</li>
</ol>
</blockquote>
<ul>
<li><strong>Vue组件间的通信有哪些方式？</strong></li>
</ul>
<blockquote>
<p><span class="pink">（1）props / $emit 适用 父子组件通信</span><br><span class="pink">（2）ref 与 $parent / $children 适用 父子组件通信</span><br>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例<br>$parent / $children：访问父 / 子实例<br><span class="pink">（3）EventBus （$emit / $on） 适用于 父子、隔代、兄弟组件通信</span><br>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。<br><span class="pink">（4）Vuex 适用于 父子、隔代、兄弟组件通信</span><br><span class="pink">（5）slot 作用域插槽</span><br>子组件内的数据可以被父组件拿到。在父作用域中使用v-slot定义插槽prop。</p>
</blockquote>
<ul>
<li><strong>组件中 data 为什么是一个函数？</strong></li>
</ul>
<blockquote>
<p><span class="pink">每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响</span></p>
</blockquote>
<ul>
<li><strong>v-show 与 v-if 有什么区别？</strong></li>
</ul>
<blockquote>
<p><span class="pink">v-if 是“真正”的条件渲染。而v-show只是简单地基于 CSS（display）进行切换。</span></p>
</blockquote>
<ul>
<li><strong>Vue的两个核心是？</strong></li>
</ul>
<blockquote>
<p><span class="pink">数据驱动和组件化</span></p>
</blockquote>
<ul>
<li><strong>如何解决初始化页面闪动的问题？</strong></li>
</ul>
<blockquote>
<p><span class="pink">使用v-clock指令，它会在Vue实例结束编译时从绑定的HTML元素上移除（配合display:none使用）</span></p>
</blockquote>
<ul>
<li><strong>computed 和 watch 的区别？</strong></li>
</ul>
<blockquote>
<span class="pink">
computed：计算属性，依赖其它属性值，有缓存，在依赖的数据发生变化时才会重新计算。不能执行异步任务。</br>
wacth：更多的是「观察」的作用。观察的是属性值，只要属性值发生变化，就会触发执行回调函数进行一系列操作。</br>
总结：computed能实现的，watch都能实现。能用computed的尽量用computed！</span>
</blockquote>
<ul>
<li><strong>v-model 的原理？</strong></li>
</ul>
<blockquote>
<p><span class="pink"> v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件。</span></p>
<ul>
<li>text 和 textarea 元素使用 value 属性和 input 事件；</li>
<li>checkbox 和 radio 使用 checked 属性和 change 事件；</li>
<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>
</ul>
</blockquote>
<blockquote>
<p>以input表单为例：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">'something'</span>&gt;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">&lt;input v-bind:value=<span class="string">"something"</span> v-on:input=<span class="string">"something = $event.target.value"</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Vue 中的 key 有什么作用？</strong></li>
</ul>
<blockquote>
<p><span class="pink">key 是 vnode 的唯一标记，通过设置key，我们的 diff 操作可以更准确、更快速。</span></p>
</blockquote>
<ul>
<li><strong>谈谈你对 keep-alive 的了解？</strong></li>
</ul>
<blockquote>
<p><span class="pink">keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</span></p>
<ol>
<li>一般结合路由和动态组件一起使用，用于缓存组件；</li>
<li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；</li>
<li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</li>
</ol>
</blockquote>
<ul>
<li><strong>怎样理解 Vue 的单向数据流？</strong></li>
</ul>
<blockquote>
<p><span class="pink">父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</span>这样会防止从子组件意外改变父级组件的状态。并且父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。</p>
</blockquote>
<blockquote>
<p>有两种常见的试图改变一个 prop 的情形 :</p>
<ul>
<li>prop 用来传递一个初始值，子组件接下来希望将其作为一个本地的 prop 数据来使用。 在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值。</li>
<li>prop 以一种原始的值传入且需要进行转换。 在这种情况下，最好使用这个 prop 的值来定义一个计算属性。</li>
</ul>
</blockquote>
<ul>
<li><strong>使用过 Vue SSR 吗？说说 SSR？</strong></li>
</ul>
<blockquote>
<p><span class="pink">SSR就是将组件渲染为服务器端的 HTML 字符串，并将它们直接发送到浏览器。</span><br>与传统 SPA 相比，SSR 的优势主要在于：<br>（1）更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。<br>（2）更快的内容到达时间 (time-to-content)，特别是对于缓慢的网络情况或运行缓慢的设备。无需等待所有的 JavaScript 都完成下载并执行，才显示服务器渲染的标记，所以你的用户将会更快速地看到完整渲染的页面。通常可以产生更好的用户体验.<br>使用SSR也有一些需要权衡的地方：<br>（1）更多的开发条件限制。例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；<br>（2）更多的构建设置和部署。服务端渲染应用程序，需要处于 Node.js server 运行环境；<br>（3）更多的服务器端负载。在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用 CPU 资源 。</p>
</blockquote>
<ul>
<li><strong>说说你对MVVM的理解</strong></li>
</ul>
<blockquote>
<p>Model 层代表数据模型，用纯JavaScript对象表示。<br>View 层负责显示。<br>ViewModel 是 MVVM 的核心，它就像是一个中转站，向上与视图层进行双向数据绑定，向下与 Model 层进行数据交互。<br>MVVM 框架实现了双向绑定，开发者只需要处理和维护 ViewModel，更新数据视图就会自动得到相应更新。由 ViewModel 负责与 Model 层交互，这就完全解耦了 View 层和 Model 层。</p>
</blockquote>
<ul>
<li><strong>说说 Vue 与 Angular 以及 React 区别</strong></li>
</ul>
<blockquote>
<p>（1）Typescript，ES6 与 ES5<br>React 专注于使用 Javascript ES6。Vue 使用 Javascript ES5 或 ES6。Angular 依赖于 TypeScript。<br>（2）模板 —— JSX 还是 HTML<br>JSX 意味着 React 中的所有内容都是 Javascript – 用于JSX模板和逻辑。</p>
</blockquote>
<ul>
<li><strong>说说你对 SPA 单页面的理解，它的优缺点分别是什么？</strong></li>
</ul>
<blockquote>
<p>SPA仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。<br>优点：<br>（1）用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染。<br>（2）基于上面一点，SPA 相对对服务器压力小。<br>（3）前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理。<br>缺点：<br>（1）首屏加载慢：初次加载通常会加载所有组件、向服务端请求数据、加载大量静态资源，因此这个时间相对会比较长。<br>（2）页面导航不可用：由于是单页面，因此不能使用浏览器的前进、后退功能，需要自己建立堆栈管理。<br>（3）不利于SEO优化：单页面应用很多内容都是动态加载的，数据也是在前端渲染的，这对搜索引擎不是很友好。</p>
</blockquote>
<ul>
<li><strong>你有对 Vue 项目进行哪些优化？</strong></li>
</ul>
<blockquote>
<p>（1）代码层面的优化</p>
<ul>
<li>v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</li>
<li><strong>图片资源懒加载</strong></li>
<li><strong>路由懒加载</strong></li>
<li><strong>第三方插件的按需引入</strong></li>
<li>服务端渲染 SSR or 预渲染</li>
</ul>
</blockquote>
<blockquote>
<p>（2）Webpack 层面的优化</p>
<ul>
<li>Webpack 对图片进行压缩</li>
<li>减少 ES6 转为 ES5 的冗余代码</li>
<li>提取公共代码</li>
<li>模板预编译</li>
<li>提取组件的 CSS</li>
<li><strong>优化 SourceMap</strong></li>
<li>构建结果输出分析</li>
<li>Vue 项目的编译优化</li>
</ul>
</blockquote>
<blockquote>
<p>（3）基础的 Web 技术的优化</p>
<ul>
<li><strong>开启 gzip 压缩</strong></li>
<li>浏览器缓存</li>
<li><strong>CDN 的使用</strong></li>
<li>使用 Chrome Performance 查找性能瓶颈</li>
</ul>
</blockquote>
<ul>
<li><strong>Proxy 与 Object.defineProperty 优劣对比</strong></li>
</ul>
<blockquote>
<p>Proxy 的优势如下:</p>
<ul>
<li>可以直接监听对象而非属性；</li>
<li>可以直接监听数组的变化；</li>
<li>有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li>
<li>返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</li>
<li>作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li>
</ul>
</blockquote>
<blockquote>
<p>Object.defineProperty 的优势如下:</p>
<ul>
<li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平。</li>
</ul>
</blockquote>
<ul>
<li><strong>对于 vue3.0 有什么了解的吗？</strong></li>
</ul>
<blockquote>
<p>6大亮点：<br>Performance：性能更比Vue 2.0强。<br>Tree shaking support：可以将无用模块“剪辑”，仅打包需要的。<br>Composition API：组合API<br>Fragment, Teleport, Suspense：“碎片”，Teleport即Protal传送门，“悬念”<br>Better TypeScript support：更优秀的Ts支持<br>Custom Renderer API：暴露了自定义渲染API</p>
</blockquote>
<p><strong>虚拟 DOM</strong></p>
<ul>
<li>虚拟 DOM 的实现原理？（数据结构、create、diff、patch）</li>
</ul>
<blockquote>
<p><span class="pink">(1)数据结构的定义 </span><br>VNode的本质是JS对象，它是对真实DOM的一种抽象描述。它的核心定义有几个关键属性：</p>
<ul>
<li>tag ：vnode的标签属性</li>
<li>data ：最后渲染成真实dom节点后，节点上的class，attribute，style等</li>
<li>children ：子节点</li>
<li>key ：vnode的标记，在diff过程中可以提高diff的效率</li>
</ul>
</blockquote>
<blockquote>
<p><span class="pink">(2) create </span><br>createElement创建VNode。createComponent创建组件VNode。<br><span class="pink">(3) diff —— 比较两棵虚拟 DOM 树的差异</span><br>组件更新过程的核心就是新旧 vnode diff，对新旧节点相同以及不同的情况分别做不同的处理。判断新旧节点是否相同是通过sameVNode(oldVnode, vnode)方法实现的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameVnode</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    a.key === b.key &amp;&amp; (</span><br><span class="line">      (</span><br><span class="line">        a.tag === b.tag &amp;&amp;</span><br><span class="line">        a.isComment === b.isComment &amp;&amp;</span><br><span class="line">        isDef(a.data) === isDef(b.data) &amp;&amp;</span><br><span class="line">        sameInputType(a, b)</span><br><span class="line">      ) || (</span><br><span class="line">        isTrue(a.isAsyncPlaceholder) &amp;&amp;</span><br><span class="line">        a.asyncFactory === b.asyncFactory &amp;&amp;</span><br><span class="line">        isUndef(b.asyncFactory.error)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sameVnode 的逻辑非常简单，如果两个 vnode 的 key 不相等，则是不同的；否则继续判断对于同步组件，则判断 isComment、data、input 类型等是否相同，对于异步组件，则判断 asyncFactory 是否相同。所以根据新旧 vnode 是否为 sameVnode，会走到不同的更新逻辑。</p>
<blockquote>
<p>新旧节点不同：创建新节点 -&gt; 更新占位符节点 -&gt; 删除旧节点<br>新旧节点相同：获取它们的 children，根据不同情况做不同的更新逻辑：<br>（1）oldCh 与 ch 都存在且不相同时，使用 updateChildren 函数来更新子节点。<br>（2）如果只有 ch 存在，表示旧节点不需要了。如果旧的节点是文本节点则先将节点的文本清除，然后通过 addVnodes 将 ch 批量插入到新节点 elm 下。<br>（3）如果只有 oldCh 存在，表示更新的是空节点，则需要将旧的节点通过 removeVnodes 全部清除。<br>（4）当只有旧节点是文本节点的时候，则清除其节点文本内容。</p>
</blockquote>
<blockquote>
<p><span class="pink">(4) patch 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树</span></p>
</blockquote>
<ul>
<li>虚拟 DOM的优缺点？</li>
</ul>
<blockquote>
<p><span class="pink">优点：</span></p>
<ol>
<li>保证性能下限： 虽然它的性能并不是最优的，但是比起粗暴的 DOM 操作性能要好很多，所以至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能。</li>
<li>无需手动操作 DOM： 我们只需要写好代码逻辑，框架会帮我们以可预期的方式更新视图，极大提高我们的开发效率；</li>
<li>跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染等等。</li>
</ol>
</blockquote>
<blockquote>
<p><span class="pink">缺点:</span></p>
<ol>
<li>无法进行极致优化： 虽然虚拟 DOM 足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</li>
</ol>
</blockquote>
<p><strong>Vue生命周期</strong></p>
<ul>
<li>Vue生命周期是什么？</li>
</ul>
<blockquote>
<p>Vue实例从开始创建、初始化数据、编译模版、挂载 Dom -&gt; 渲染、更新 -&gt; 渲染、卸载的一系列过程</p>
</blockquote>
<ul>
<li>说一下每个生命周期的作用？</li>
</ul>
<blockquote>
<p><span class="pink">beforeCreate（创建前）</span>：initState之前调用，所以data，computed，watch，methods 均不能访问。<br><span class="pink">created（创建后）</span>：initState之后调用，初始化事件已完成，可访问 data computed watch methods。初始化完成时的事件写在这里，异步请求也适宜在这里调用。<br><span class="pink">beforeMount（挂载前）</span>：在挂载开始前被调用，此时vm._render函数还没执行。<br><span class="pink">mounted（挂载后）</span>：在挂载后被调用，此时已完成DOM的渲染和挂载，一般在这个函数中完成依赖DOM的操作，比如监听DOM事件。<br><span class="pink">beforeUpdate（更新前）</span>：在数据更新之前调用，发生在虚拟DOM重新渲染和patch之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。<br><span class="pink">updated（更新后）</span>：在由于数据更改导致的虚拟DOM重新渲染和patch之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。<br><span class="pink">beforeDestroy（销毁前）</span>：在实例销毁之前调用。实例仍然完全可用。<br><span class="pink">destroyed（销毁后）</span>：在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。<br><span class="pink">activated（激活）</span>：在使用vue-router时有时需要使用<keep-alive></keep-alive>来缓存组件状态，这个时候created钩子就不会被重复调用了。如果我们的子组件需要在每次加载的时候进行某些操作，可以使用activated钩子触发。<br><span class="pink">deactivated（未激活）</span>：keep-alive组件停用时调用。</p>
</blockquote>
<ul>
<li>第一次页面加载会触发哪几个钩子？</li>
</ul>
<blockquote>
<p>beforeCreate、created、beforeMount、mounted</p>
</blockquote>
<ul>
<li>Vue 的父组件和子组件生命周期钩子函数执行顺序？</li>
</ul>
<blockquote>
<p>Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：<br>（1）加载渲染过程<br>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted<br>（2）子组件更新过程<br>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated<br>（3）父组件更新过程<br>父 beforeUpdate -&gt; 父 updated<br>（4）销毁过程<br>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p>
</blockquote>
<ul>
<li>在哪个生命周期内调用异步请求？</li>
</ul>
<blockquote>
<p>可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：<br>（1）能更快获取到服务端数据，减少页面 loading 时间；<br>（2）ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；</p>
</blockquote>
<ul>
<li>父组件可以监听到子组件的生命周期吗？</li>
</ul>
<blockquote>
<p>在父组件引用子组件时通过 @hook 来监听即可。@hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听。</p>
</blockquote>
<p><strong>Vue-Router</strong></p>
<ul>
<li>Vue-router 有几种路由模式？它们的实现原理是什么？</li>
</ul>
<blockquote>
<p>（1）hash模式（默认）：浏览器中，#后面的字符称之为hash，用window.location.hash获取。虽然在URL中，但不被包含在HTTP请求中。当URL改变的时候，不会重新加载页面。因此，对后端来说，即使没有做到对路由的全覆盖，也不会返回404错误。<br>（2）history模式：history模式采用HTML5的新特性，提供了两个方法pushState()、replaceState()可以对浏览器历史记录栈进行修改，以及popState事件可以监听到状态变更。history模式下，前端的URL必须和实际向后端发起请求的URL一致。后端如果缺少对路由的处理，将返回404错误。所以需要在服务端增加一个覆盖所有情况的候选资源。</p>
</blockquote>
<ul>
<li>Vue-router的钩子函数（导航守卫）有哪些？</li>
</ul>
<blockquote>
<p>全局守卫：</p>
<ul>
<li>beforeEach(to, from, next)</li>
<li>beforeResolve</li>
<li>afterEach</li>
</ul>
</blockquote>
<blockquote>
<p>路由独享守卫：</p>
<ul>
<li>beforeEnter</li>
<li>beforeLeave</li>
</ul>
</blockquote>
<blockquote>
<p>组件内守卫：</p>
<ul>
<li>beforeRouteEnter：不能获取组件实例‘this’，因为在守卫执行前，组件实例还没被创建。</li>
<li>beforeRouteUpdate：在当前路由改变，但是该组件被复用时调用。</li>
<li>beforeRouteLeave</li>
</ul>
</blockquote>
<ul>
<li>$route和$router的区别？</li>
</ul>
<blockquote>
<p>$route：路由对象，一个路由对象包含了当前激活的路由的状态信息。比如path、params、query等。<br>$router：Vue-router的实例对象，包含了路由的跳转方法，钩子函数等。</p>
</blockquote>
<ul>
<li>怎么定义嵌套路由？</li>
</ul>
<blockquote>
<p>在VueRouter的参数中使用children配置。</p>
</blockquote>
<ul>
<li>怎么实现动态路由匹配？</li>
</ul>
<blockquote>
<p>在路由路径中使用 动态路径参数（以冒号开头）实现动态路由匹配。</p>
</blockquote>
<ul>
<li>怎么实现路由懒加载？</li>
</ul>
<blockquote>
<p>使用ES6提供的import语法。还可以指定webpackChunkName，将组件按组分块。</p>
</blockquote>
<ul>
<li>params和query都可以用来传参，区别是什么？</li>
</ul>
<blockquote>
<p>params：用params传参必须提供路由的name，如果提供的是path，params会被忽略。<br>query：用query传参可使用path，参数会拼接在url中。</p>
</blockquote>
<ul>
<li>active-class是哪个组件的属性？</li>
</ul>
<blockquote>
<p><router-link>组件，用来设置链接激活时使用的CSS类名。</p>
</blockquote>
<p><strong>Vuex</strong></p>
<ul>
<li>Vuex是什么？</li>
</ul>
<blockquote>
<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br><span class="pink">（1）Vuex 的状态存储是响应式的。</span>当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。<br><span class="pink">（2）改变 store 中的状态的唯一途径就是显式地提交mutation。</span>这样使得我们可以方便地跟踪每一个状态的变化。<br>主要包括以下几个模块：<br><span class="pink">State</span>：定义了应用状态的数据结构，可以在这里设置默认的初始状态。<br><span class="pink">Getter</span>：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。<br><span class="pink">Mutation</span>：是唯一更改 store 中状态的方法，且必须是同步函数。<br><span class="pink">Action</span>：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。<br><span class="pink">Module</span>：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</p>
</blockquote>
<ul>
<li>Vuex和单纯的全局对象的区别？</li>
</ul>
<blockquote>
<p>vuex的状态存储是响应式的。<br>vuex不能直接改变store中的状态，改变store中状态的唯一途径就是显式地提交mutation。</p>
</blockquote>
<h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><h4 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h4><h3 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h3><h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul>
<li>说一说都有哪些数据结构？</li>
<li>各种排序算法的实现原理？应用场景？</li>
<li>递归的优缺点？应用场景？</li>
<li>回溯算法</li>
<li>贪心算法</li>
<li>分治算法</li>
<li>动态规划</li>
</ul>
<h3 id="项目与业务"><a href="#项目与业务" class="headerlink" title="项目与业务"></a>项目与业务</h3>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>手写JS系列</title>
    <url>/2020/06/12/%E6%89%8B%E5%86%99JS%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h4 id="1-bind"><a href="#1-bind" class="headerlink" title="1. bind"></a>1. bind</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><blockquote>
<p>bind() 创建一个新函数，叫<strong>绑定函数</strong>（bound function，BF），在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>
</blockquote>
<a id="more"></a>
<h5 id="简单版"><a href="#简单版" class="headerlink" title="简单版"></a>简单版</h5><p>按照bind函数的定义，我们可以实现一个简单版本的bind如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写bind函数(简单版)</span></span><br><span class="line"><span class="comment"> * 1、返回一个新函数</span></span><br><span class="line"><span class="comment"> * 2、新函数的this被指定为bind的第一个参数</span></span><br><span class="line"><span class="comment"> * 3、bind的其余参数作为新函数的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - '</span> + <span class="string">'what is trying to be bound is not callable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(oThis, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成了一个简单版本的bind函数，它适用于大多数场景。但是有一个例外，MDN上对绑定函数有如下描述</p>
<blockquote>
<p>绑定函数也可以使用 new 运算符构造，它会表现为目标函数已经被构建完毕了似的。<span class="pink">提供的 this 值会被忽略</span>，但前置参数仍会提供给模拟函数。</p>
</blockquote>
<p>显然上面的bind函数没有实现这样的功能，因为它始终会改变绑定函数的this指向。因此我们需要对它做一些修改。</p>
<h5 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写bind函数(进阶版)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - '</span> + <span class="string">'what is trying to be bound is not callable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 检测是否使用new来调用绑定函数fBound</span></span><br><span class="line">    <span class="comment">// 如果是，this就指向其实例；如果不是，this就指向指定的oThis</span></span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span> <span class="keyword">instanceof</span> self ? <span class="keyword">this</span> : oThis</span><br><span class="line">    <span class="keyword">return</span> self.apply(_this, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.prototype) &#123;</span><br><span class="line">    fBound.prototype = <span class="keyword">this</span>.prototype</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试bind</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> Cat = Animal.bind(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom = <span class="keyword">new</span> Cat(<span class="string">'tom'</span>) <span class="comment">// 此时this指向的是tom实例，而不是指定的obj</span></span><br><span class="line"><span class="built_in">console</span>.log(tom.name)  <span class="comment">// tom</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name)  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>看起来已经实现了我们想要的功能，由于我们设置了Cat.prototype = Animal.prototype，因此new Cat()生成的tom对象既是Cat的实例，也是Animal的实例（即<span class="pink">tom.__proto__ === Cat.prototype === Animal.prototype</span>）所以<span class="pink">tom instanceof Animal</span>为true，所以此时this指向tom实例而不是指定的obj对象。但是还有一个问题，这种直接赋值原型对象的写法会存在一个隐患，即修改其中一个原型，另一个也会受影响。因此我们需要引入一个“中间人”来避免这个问题。</p>
<h5 id="终极版"><a href="#终极版" class="headerlink" title="终极版"></a>终极版</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写bind函数(终极版)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - '</span> + <span class="string">'what is trying to be bound is not callable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> fNOP = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 引入中间函数fNOP来保存原函数的原型</span></span><br><span class="line">  <span class="keyword">let</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span> <span class="keyword">instanceof</span> self ? <span class="keyword">this</span> : oThis</span><br><span class="line">    <span class="keyword">return</span> self.apply(_this, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.prototype) &#123;</span><br><span class="line">    fNOP.prototype = <span class="keyword">this</span>.prototype</span><br><span class="line">  &#125;</span><br><span class="line">  fBound.prototype = <span class="keyword">new</span> fNOP() <span class="comment">// 修改绑定函数的原型</span></span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时绑定函数的原型对象就是原函数的一个实例，修改fBound.prototype不会对原函数的原型有任何影响。这就是bind的完整实现。</p>
<h4 id="2-call、apply"><a href="#2-call、apply" class="headerlink" title="2. call、apply"></a>2. call、apply</h4><h5 id="call"><a href="#call" class="headerlink" title="call"></a>call</h5><p><strong>定义</strong></p>
<blockquote>
<p>call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。</p>
</blockquote>
<p><strong>实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写call函数</span></span><br><span class="line"><span class="comment"> * 1、将函数设置为对象属性</span></span><br><span class="line"><span class="comment"> * 2、调用函数</span></span><br><span class="line"><span class="comment"> * 3、删除属性</span></span><br><span class="line"><span class="comment"> * 4、处理thisArg参数（thisArg可以指定为null，为null时指向全局对象window）</span></span><br><span class="line"><span class="comment"> * 5、处理其余参数</span></span><br><span class="line"><span class="comment"> * 6、处理有返回值的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg</span>) </span>&#123;</span><br><span class="line">  thisArg = thisArg || <span class="built_in">window</span></span><br><span class="line">  thisArg.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">    args.push(<span class="string">'arguments['</span>+ i +<span class="string">']'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">eval</span>(<span class="string">'thisArg.fn('</span>+ args +<span class="string">')'</span>)</span><br><span class="line">  <span class="keyword">delete</span> thisArg.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h5><p><strong>定义</strong></p>
<blockquote>
<p>apply() 方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。</p>
</blockquote>
<p><strong>实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply2 = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg, arr</span>) </span>&#123;</span><br><span class="line">  thisArg = thisArg || <span class="built_in">window</span></span><br><span class="line">  thisArg.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> result</span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    result = thisArg.fn()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">      args.push(<span class="string">'arr['</span>+ i +<span class="string">']'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">'thisArg.fn('</span>+ args +<span class="string">')'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> thisArg.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class='pink'>注意：call()方法的作用和apply()方法类似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。</span></p>
</blockquote>
<h4 id="3-节流"><a href="#3-节流" class="headerlink" title="3. 节流"></a>3. 节流</h4><p>在前端开发中会遇到一些频繁触发的事件，比如：</p>
<ul>
<li>windows的resize、scroll</li>
<li>mousedown、mousemove</li>
<li>keydown、keyup</li>
<li>ajax请求等</li>
</ul>
<p>如果在这些事件中进行复杂的操作，或者消耗性能的操作（如DOM操作），其高频的触发可能会造成浏览器卡顿，甚至崩溃。为了解决这个问题，一般有以下两种解决方案：</p>
<ol>
<li>节流（throttle） </li>
<li>防抖（debounce）</li>
</ol>
<p>我们首先来看看节流的实现。</p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>节流的原理是一定时间内事件只执行一次。通过判断是否到达一定时间来触发事件。主要有两种实现方法：时间戳和定时器。</p>
<h5 id="时间戳实现"><a href="#时间戳实现" class="headerlink" title="时间戳实现"></a>时间戳实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流(时间戳)</span></span><br><span class="line"><span class="comment"> * 1. this</span></span><br><span class="line"><span class="comment"> * 2. 参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args</span><br><span class="line">  <span class="keyword">var</span> previous = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      previous = now</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="定时器实现"><a href="#定时器实现" class="headerlink" title="定时器实现"></a>定时器实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流（定时器）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer, context, args</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对比两种实现方法发现</p>
<ol>
<li>第一种事件会立即执行，第二种事件会等待wait秒后执行第一次。</li>
<li>第一种事件停止触发后没有办法再执行事件，第二种事件停止触发后还会再执行一次。</li>
</ol>
<h5 id="定时器-时间戳"><a href="#定时器-时间戳" class="headerlink" title="定时器+时间戳"></a>定时器+时间戳</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流（定时器+时间戳）</span></span><br><span class="line"><span class="comment"> * 1. 根据options参数决定首次是否立即执行，结束触发后是否再执行一次</span></span><br><span class="line"><span class="comment"> * leading: false 表示禁用首次立即执行</span></span><br><span class="line"><span class="comment"> * trailing: false 表示禁用停止触发</span></span><br><span class="line"><span class="comment"> * 2. 增加cancel方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args, timer</span><br><span class="line">  <span class="keyword">var</span> previous = <span class="number">0</span></span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    previous = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    func.apply(context, args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> throttled = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">var</span> remaining = wait - (now - previous) <span class="comment">// 下一次触发事件剩余的时间</span></span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123; <span class="comment">// 没有了剩余时间或者修改了系统时间</span></span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      previous = now</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">      timer = setTimeout(later, remaining)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  throttled.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    previous = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> throttled</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-防抖"><a href="#4-防抖" class="headerlink" title="4. 防抖"></a>4. 防抖</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>防抖的原理是事件触发n秒后执行，如果期间再有事件触发，则以新的触发事件为准，n秒后再执行。</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖debounce(func, wait, [immediate])</span></span><br><span class="line"><span class="comment"> * 1. this</span></span><br><span class="line"><span class="comment"> * 2. 参数</span></span><br><span class="line"><span class="comment"> * 3. 首次立即执行</span></span><br><span class="line"><span class="comment"> * 4. 返回值</span></span><br><span class="line"><span class="comment"> * 5. 增加cancel方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args, timer, result</span><br><span class="line">  <span class="keyword">const</span> debounced = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (timer) clearTimeout(timer)</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">var</span> callNow = !timer</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">      <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">        result = func.apply(context, args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  debounced.concel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-深拷贝"><a href="#5-深拷贝" class="headerlink" title="5. 深拷贝"></a>5. 深拷贝</h4><h5 id="JSON-parse-JSON-stringify-obj"><a href="#JSON-parse-JSON-stringify-obj" class="headerlink" title="JSON.parse(JSON.stringify(obj))"></a>JSON.parse(JSON.stringify(obj))</h5><blockquote>
<p><span class="pink">JSON.parse(JSON.stringify(obj))</span> 方法可以用来深拷贝一个数组或对象，但是<strong>undefined、函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。</strong></p>
</blockquote>
<h5 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> || <span class="keyword">typeof</span> obj === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj <span class="comment">// 如果不是引用类型，或者为null，直接返回</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123; <span class="comment">// 保证不是原型上的属性</span></span><br><span class="line">      res[key] = deepClone(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6-深度比较"><a href="#6-深度比较" class="headerlink" title="6. 深度比较"></a>6. 深度比较</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深度比较（简单版）</span></span><br><span class="line"><span class="comment"> * 1. 判断是不是同一个对象</span></span><br><span class="line"><span class="comment"> * 2. 判断属性个数是否一致</span></span><br><span class="line"><span class="comment"> * 3. 比较对应位置上的属性是否相等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj1 !== <span class="string">'object'</span> || <span class="keyword">typeof</span> obj2 !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj1 === obj2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">var</span> obj1_keys = <span class="built_in">Object</span>.keys(obj1)</span><br><span class="line">  <span class="keyword">var</span> obj2_keys = <span class="built_in">Object</span>.keys(obj2)</span><br><span class="line">  <span class="keyword">if</span> (obj1_keys.length !== obj2_keys.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = isEqual(obj1[key], obj2[key])</span><br><span class="line">    <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7-数组去重"><a href="#7-数组去重" class="headerlink" title="7. 数组去重"></a>7. 数组去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="string">'str'</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>]</span><br></pre></td></tr></table></figure>
<h5 id="双重循环"><a href="#双重循环" class="headerlink" title="双重循环"></a>双重循环</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重循环</span></span><br><span class="line"><span class="comment"> * 优点：兼容性好</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arrLen = arr.length; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, resLen = res.length; j &lt; resLen; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === res[j]) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j === resLen) &#123;</span><br><span class="line">      res.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;, NaN, NaN]</span></span><br></pre></td></tr></table></figure>
<h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * indexOf</span></span><br><span class="line"><span class="comment"> * 优点：简化内层循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arrLen = arr.length; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.indexOf(arr[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">      res.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;, NaN, NaN]</span></span><br></pre></td></tr></table></figure>
<h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sort</span></span><br><span class="line"><span class="comment"> * 优点：对于已排好序的数组去重效率比较高</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">var</span> sortedArr = arr.concat().sort()</span><br><span class="line">  res.push(sortedArr[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>, len = sortedArr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sortedArr[i] !== sortedArr[i<span class="number">-1</span>]) &#123;</span><br><span class="line">      res.push(sortedArr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", NaN, NaN, &#123;&#125;, &#123;&#125;, null, "str", true, undefined]</span></span><br></pre></td></tr></table></figure>
<h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter + indexOf</span></span><br><span class="line"><span class="comment"> * 优点：简化外层循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter + 排序</span></span><br><span class="line"><span class="comment"> * 优点：简化外层循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = arr.concat().sort().filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !index || item !== arr[index - <span class="number">1</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", NaN, NaN, &#123;&#125;, &#123;&#125;, null, "str", true, undefined]</span></span><br></pre></td></tr></table></figure>
<h5 id="Object键值对"><a href="#Object键值对" class="headerlink" title="Object键值对"></a>Object键值对</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主要利用对象的key值不能重复的特点</span></span><br><span class="line"><span class="comment"> * 优点：可以去掉重复的&#123;&#125; 和 NaN</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="string">'str'</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.hasOwnProperty(item) ? <span class="literal">false</span> : ( obj[item] = <span class="literal">true</span> )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "str", true, undefined, null, &#123;&#125;, NaN]</span></span><br></pre></td></tr></table></figure>
<p>如果细心观察，我们会发现上面的方法存在两个问题：</p>
<ol>
<li><span class="pink"> 1 </span>和<span class="pink">‘1’</span>在这个方法中被判断为相同。</li>
<li>无法正确区分出两个对象。</li>
</ol>
<p>问题一是因为对象的key值只能是字符串的原因。可以使用<span class="pink"> typeof item + item </span>拼接成字符串作为key值来避免这个问题。<br>问题二是因为<span class="pink"> typeof item + item </span>的结果都会是<span class="pink"> object[object Object]</span>。所以无法区分两个对象。可以使用<span class="pink"> JSON.stringify </span>将对象序列化后再拼接上typeof item来解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化后的键值对方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)) </span><br><span class="line">                ? <span class="literal">false</span> </span><br><span class="line">                : (obj[<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, NaN, &#123;a: 1&#125;, &#123;b: 2&#125;]</span></span><br></pre></td></tr></table></figure>
<h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set</span></span><br><span class="line"><span class="comment"> * 优点：太简洁了！ </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;, NaN]</span></span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>以上各种去重方法的比较（重点关注NaN和对象的去重情况）</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>双重循环</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>indexOf</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>sort</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>filter + indexOf</td>
<td>对象不去重 NaN 会被忽略掉</td>
</tr>
<tr>
<td>filter + sort</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>键值对</td>
<td><strong>对象 NaN 去重</strong></td>
</tr>
<tr>
<td>Set</td>
<td><strong>对象不去重 NaN 去重</strong></td>
</tr>
</tbody></table>
<h4 id="8-reduce方法"><a href="#8-reduce方法" class="headerlink" title="8. reduce方法"></a>8. reduce方法</h4><h4 id="9-数组扁平化"><a href="#9-数组扁平化" class="headerlink" title="9. 数组扁平化"></a>9. 数组扁平化</h4><h4 id="10-new操作符"><a href="#10-new操作符" class="headerlink" title="10. new操作符"></a>10. new操作符</h4><h4 id="11-JSON-stringify"><a href="#11-JSON-stringify" class="headerlink" title="11. JSON.stringify"></a>11. JSON.stringify</h4><h4 id="12-JSON-parse"><a href="#12-JSON-parse" class="headerlink" title="12. JSON.parse"></a>12. JSON.parse</h4><h4 id="13-函数柯里化"><a href="#13-函数柯里化" class="headerlink" title="13. 函数柯里化"></a>13. 函数柯里化</h4><h4 id="14-instanceOf"><a href="#14-instanceOf" class="headerlink" title="14. instanceOf"></a>14. instanceOf</h4><h4 id="15-Class实现继承"><a href="#15-Class实现继承" class="headerlink" title="15. Class实现继承"></a>15. Class实现继承</h4><h4 id="16-Promise"><a href="#16-Promise" class="headerlink" title="16. Promise"></a>16. Promise</h4><h4 id="17-async、await"><a href="#17-async、await" class="headerlink" title="17. async、await"></a>17. async、await</h4><h4 id="18-sleep函数"><a href="#18-sleep函数" class="headerlink" title="18. sleep函数"></a>18. sleep函数</h4><h4 id="19-EventEmitter"><a href="#19-EventEmitter" class="headerlink" title="19. EventEmitter"></a>19. EventEmitter</h4><h4 id="20-模板引擎"><a href="#20-模板引擎" class="headerlink" title="20. 模板引擎"></a>20. 模板引擎</h4><h4 id="21-懒加载、下拉刷新、上拉加载、预加载"><a href="#21-懒加载、下拉刷新、上拉加载、预加载" class="headerlink" title="21. 懒加载、下拉刷新、上拉加载、预加载"></a>21. 懒加载、下拉刷新、上拉加载、预加载</h4>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
