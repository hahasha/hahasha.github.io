<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nginx的安装和配置</title>
    <url>/2020/05/24/nginx%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>手写jQuery方法系列</title>
    <url>/2020/06/14/%E6%89%8B%E5%86%99jQuery%E6%96%B9%E6%B3%95%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JavaScript</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习书签</title>
    <url>/2020/06/12/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%A6%E7%AD%BE/</url>
    <content><![CDATA[<h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><h4 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h4><h4 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h4><h4 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h4><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><h4 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h4><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4>]]></content>
      <tags>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解JavaScript系列</title>
    <url>/2020/06/14/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h4 id="1、数据类型与深拷贝、浅拷贝"><a href="#1、数据类型与深拷贝、浅拷贝" class="headerlink" title="1、数据类型与深拷贝、浅拷贝"></a>1、数据类型与深拷贝、浅拷贝</h4>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>手写JS系列</title>
    <url>/2020/06/12/%E6%89%8B%E5%86%99JS%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h4 id="1-bind"><a href="#1-bind" class="headerlink" title="1. bind"></a>1. bind</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><blockquote>
<p>bind() 创建一个新函数，叫<strong>绑定函数</strong>（bound function，BF），在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>
</blockquote>
<a id="more"></a>
<h5 id="简单版"><a href="#简单版" class="headerlink" title="简单版"></a>简单版</h5><p>按照bind函数的定义，我们可以实现一个简单版本的bind如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写bind函数(简单版)</span></span><br><span class="line"><span class="comment"> * 1、返回一个新函数</span></span><br><span class="line"><span class="comment"> * 2、新函数的this被指定为bind的第一个参数</span></span><br><span class="line"><span class="comment"> * 3、bind的其余参数作为新函数的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - '</span> + <span class="string">'what is trying to be bound is not callable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(oThis, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成了一个简单版本的bind函数，它适用于大多数场景。但是有一个例外，MDN上对绑定函数有如下描述</p>
<blockquote>
<p>绑定函数也可以使用 new 运算符构造，它会表现为目标函数已经被构建完毕了似的。<span class="pink">提供的 this 值会被忽略</span>，但前置参数仍会提供给模拟函数。</p>
</blockquote>
<p>显然上面的bind函数没有实现这样的功能，因为它始终会改变绑定函数的this指向。因此我们需要对它做一些修改。</p>
<h5 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写bind函数(进阶版)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - '</span> + <span class="string">'what is trying to be bound is not callable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 检测是否使用new来调用绑定函数fBound</span></span><br><span class="line">    <span class="comment">// 如果是，this就指向其实例；如果不是，this就指向指定的oThis</span></span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span> <span class="keyword">instanceof</span> self ? <span class="keyword">this</span> : oThis</span><br><span class="line">    <span class="keyword">return</span> self.apply(_this, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.prototype) &#123;</span><br><span class="line">    fBound.prototype = <span class="keyword">this</span>.prototype</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试bind</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> Cat = Animal.bind(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom = <span class="keyword">new</span> Cat(<span class="string">'tom'</span>) <span class="comment">// 此时this指向的是tom实例，而不是指定的obj</span></span><br><span class="line"><span class="built_in">console</span>.log(tom.name)  <span class="comment">// tom</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name)  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>看起来已经实现了我们想要的功能，由于我们设置了Cat.prototype = Animal.prototype，因此new Cat()生成的tom对象既是Cat的实例，也是Animal的实例（即<span class="pink">tom.__proto__ === Cat.prototype === Animal.prototype</span>）所以<span class="pink">tom instanceof Animal</span>为true，所以此时this指向tom实例而不是指定的obj对象。但是还有一个问题，这种直接赋值原型对象的写法会存在一个隐患，即修改其中一个原型，另一个也会受影响。因此我们需要引入一个“中间人”来避免这个问题。</p>
<h5 id="终极版"><a href="#终极版" class="headerlink" title="终极版"></a>终极版</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写bind函数(终极版)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - '</span> + <span class="string">'what is trying to be bound is not callable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> fNOP = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 引入中间函数fNOP来保存原函数的原型</span></span><br><span class="line">  <span class="keyword">let</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span> <span class="keyword">instanceof</span> self ? <span class="keyword">this</span> : oThis</span><br><span class="line">    <span class="keyword">return</span> self.apply(_this, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.prototype) &#123;</span><br><span class="line">    fNOP.prototype = <span class="keyword">this</span>.prototype</span><br><span class="line">  &#125;</span><br><span class="line">  fBound.prototype = <span class="keyword">new</span> fNOP() <span class="comment">// 修改绑定函数的原型</span></span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时绑定函数的原型对象就是原函数的一个实例，修改fBound.prototype不会对原函数的原型有任何影响。这就是bind的完整实现。</p>
<h4 id="2-call、apply"><a href="#2-call、apply" class="headerlink" title="2. call、apply"></a>2. call、apply</h4><h5 id="call"><a href="#call" class="headerlink" title="call"></a>call</h5><p><strong>定义</strong></p>
<blockquote>
<p>call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。</p>
</blockquote>
<p><strong>实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写call函数</span></span><br><span class="line"><span class="comment"> * 1、将函数设置为对象属性</span></span><br><span class="line"><span class="comment"> * 2、调用函数</span></span><br><span class="line"><span class="comment"> * 3、删除属性</span></span><br><span class="line"><span class="comment"> * 4、处理thisArg参数（thisArg可以指定为null，为null时指向全局对象window）</span></span><br><span class="line"><span class="comment"> * 5、处理其余参数</span></span><br><span class="line"><span class="comment"> * 6、处理有返回值的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg</span>) </span>&#123;</span><br><span class="line">  thisArg = thisArg || <span class="built_in">window</span></span><br><span class="line">  thisArg.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">    args.push(<span class="string">'arguments['</span>+ i +<span class="string">']'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">eval</span>(<span class="string">'thisArg.fn('</span>+ args +<span class="string">')'</span>)</span><br><span class="line">  <span class="keyword">delete</span> thisArg.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h5><p><strong>定义</strong></p>
<blockquote>
<p>apply() 方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。</p>
</blockquote>
<p><strong>实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply2 = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg, arr</span>) </span>&#123;</span><br><span class="line">  thisArg = thisArg || <span class="built_in">window</span></span><br><span class="line">  thisArg.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> result</span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    result = thisArg.fn()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">      args.push(<span class="string">'arr['</span>+ i +<span class="string">']'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">'thisArg.fn('</span>+ args +<span class="string">')'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> thisArg.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class='pink'>注意：call()方法的作用和apply()方法类似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。</span></p>
</blockquote>
<h4 id="3-节流"><a href="#3-节流" class="headerlink" title="3. 节流"></a>3. 节流</h4><p>在前端开发中会遇到一些频繁触发的事件，比如：</p>
<ul>
<li>windows的resize、scroll</li>
<li>mousedown、mousemove</li>
<li>keydown、keyup</li>
<li>ajax请求等</li>
</ul>
<p>如果在这些事件中进行复杂的操作，或者消耗性能的操作（如DOM操作），其高频的触发可能会造成浏览器卡顿，甚至崩溃。为了解决这个问题，一般有以下两种解决方案：</p>
<ol>
<li>节流（throttle） </li>
<li>防抖（debounce）</li>
</ol>
<p>我们首先来看看节流的实现。</p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>节流的原理是一定时间内事件只执行一次。通过判断是否到达一定时间来触发事件。主要有两种实现方法：时间戳和定时器。</p>
<h5 id="时间戳实现"><a href="#时间戳实现" class="headerlink" title="时间戳实现"></a>时间戳实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流(时间戳)</span></span><br><span class="line"><span class="comment"> * 1. this</span></span><br><span class="line"><span class="comment"> * 2. 参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args</span><br><span class="line">  <span class="keyword">var</span> previous = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      previous = now</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="定时器实现"><a href="#定时器实现" class="headerlink" title="定时器实现"></a>定时器实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流（定时器）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer, context, args</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对比两种实现方法发现</p>
<ol>
<li>第一种事件会立即执行，第二种事件会等待wait秒后执行第一次。</li>
<li>第一种事件停止触发后没有办法再执行事件，第二种事件停止触发后还会再执行一次。</li>
</ol>
<h5 id="定时器-时间戳"><a href="#定时器-时间戳" class="headerlink" title="定时器+时间戳"></a>定时器+时间戳</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流（定时器+时间戳）</span></span><br><span class="line"><span class="comment"> * 1. 根据options参数决定首次是否立即执行，结束触发后是否再执行一次</span></span><br><span class="line"><span class="comment"> * leading: false 表示禁用首次立即执行</span></span><br><span class="line"><span class="comment"> * trailing: false 表示禁用停止触发</span></span><br><span class="line"><span class="comment"> * 2. 增加cancel方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args, timer</span><br><span class="line">  <span class="keyword">var</span> previous = <span class="number">0</span></span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    previous = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    func.apply(context, args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> throttled = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">var</span> remaining = wait - (now - previous) <span class="comment">// 下一次触发事件剩余的时间</span></span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123; <span class="comment">// 没有了剩余时间或者修改了系统时间</span></span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      previous = now</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">      timer = setTimeout(later, remaining)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  throttled.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    previous = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> throttled</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-防抖"><a href="#4-防抖" class="headerlink" title="4. 防抖"></a>4. 防抖</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>防抖的原理是事件触发n秒后执行，如果期间再有事件触发，则以新的触发事件为准，n秒后再执行。</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖debounce(func, wait, [immediate])</span></span><br><span class="line"><span class="comment"> * 1. this</span></span><br><span class="line"><span class="comment"> * 2. 参数</span></span><br><span class="line"><span class="comment"> * 3. 首次立即执行</span></span><br><span class="line"><span class="comment"> * 4. 返回值</span></span><br><span class="line"><span class="comment"> * 5. 增加cancel方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args, timer, result</span><br><span class="line">  <span class="keyword">const</span> debounced = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (timer) clearTimeout(timer)</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">var</span> callNow = !timer</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">      <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">        result = func.apply(context, args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  debounced.concel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-深拷贝"><a href="#5-深拷贝" class="headerlink" title="5. 深拷贝"></a>5. 深拷贝</h4><h5 id="JSON-parse-JSON-stringify-obj"><a href="#JSON-parse-JSON-stringify-obj" class="headerlink" title="JSON.parse(JSON.stringify(obj))"></a>JSON.parse(JSON.stringify(obj))</h5><blockquote>
<p><span class="pink">JSON.parse(JSON.stringify(obj))</span> 方法可以用来深拷贝一个数组或对象，但是<strong>undefined、函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。</strong></p>
</blockquote>
<h5 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> || <span class="keyword">typeof</span> obj === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj <span class="comment">// 如果不是引用类型，或者为null，直接返回</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123; <span class="comment">// 保证不是原型上的属性</span></span><br><span class="line">      res[key] = deepClone(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6-深度比较"><a href="#6-深度比较" class="headerlink" title="6. 深度比较"></a>6. 深度比较</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深度比较（简单版）</span></span><br><span class="line"><span class="comment"> * 1. 判断是不是同一个对象</span></span><br><span class="line"><span class="comment"> * 2. 判断属性个数是否一致</span></span><br><span class="line"><span class="comment"> * 3. 比较对应位置上的属性是否相等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj1 !== <span class="string">'object'</span> || <span class="keyword">typeof</span> obj2 !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj1 === obj2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">var</span> obj1_keys = <span class="built_in">Object</span>.keys(obj1)</span><br><span class="line">  <span class="keyword">var</span> obj2_keys = <span class="built_in">Object</span>.keys(obj2)</span><br><span class="line">  <span class="keyword">if</span> (obj1_keys.length !== obj2_keys.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = isEqual(obj1[key], obj2[key])</span><br><span class="line">    <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7-数组去重"><a href="#7-数组去重" class="headerlink" title="7. 数组去重"></a>7. 数组去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="string">'str'</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>]</span><br></pre></td></tr></table></figure>
<h5 id="双重循环"><a href="#双重循环" class="headerlink" title="双重循环"></a>双重循环</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重循环</span></span><br><span class="line"><span class="comment"> * 优点：兼容性好</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arrLen = arr.length; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, resLen = res.length; j &lt; resLen; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === res[j]) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j === resLen) &#123;</span><br><span class="line">      res.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;, NaN, NaN]</span></span><br></pre></td></tr></table></figure>
<h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * indexOf</span></span><br><span class="line"><span class="comment"> * 优点：简化内层循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arrLen = arr.length; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.indexOf(arr[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">      res.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;, NaN, NaN]</span></span><br></pre></td></tr></table></figure>
<h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sort</span></span><br><span class="line"><span class="comment"> * 优点：对于已排好序的数组去重效率比较高</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">var</span> sortedArr = arr.concat().sort()</span><br><span class="line">  res.push(sortedArr[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>, len = sortedArr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sortedArr[i] !== sortedArr[i<span class="number">-1</span>]) &#123;</span><br><span class="line">      res.push(sortedArr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", NaN, NaN, &#123;&#125;, &#123;&#125;, null, "str", true, undefined]</span></span><br></pre></td></tr></table></figure>
<h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter + indexOf</span></span><br><span class="line"><span class="comment"> * 优点：简化外层循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter + 排序</span></span><br><span class="line"><span class="comment"> * 优点：简化外层循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = arr.concat().sort().filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !index || item !== arr[index - <span class="number">1</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", NaN, NaN, &#123;&#125;, &#123;&#125;, null, "str", true, undefined]</span></span><br></pre></td></tr></table></figure>
<h5 id="Object键值对"><a href="#Object键值对" class="headerlink" title="Object键值对"></a>Object键值对</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主要利用对象的key值不能重复的特点</span></span><br><span class="line"><span class="comment"> * 优点：可以去掉重复的&#123;&#125; 和 NaN</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="string">'str'</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.hasOwnProperty(item) ? <span class="literal">false</span> : ( obj[item] = <span class="literal">true</span> )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "str", true, undefined, null, &#123;&#125;, NaN]</span></span><br></pre></td></tr></table></figure>
<p>如果细心观察，我们会发现上面的方法存在两个问题：</p>
<ol>
<li><span class="pink"> 1 </span>和<span class="pink">‘1’</span>在这个方法中被判断为相同。</li>
<li>无法正确区分出两个对象。</li>
</ol>
<p>问题一是因为对象的key值只能是字符串的原因。可以使用<span class="pink"> typeof item + item </span>拼接成字符串作为key值来避免这个问题。<br>问题二是因为<span class="pink"> typeof item + item </span>的结果都会是<span class="pink"> object[object Object]</span>。所以无法区分两个对象。可以使用<span class="pink"> JSON.stringify </span>将对象序列化后再拼接上typeof item来解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化后的键值对方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)) </span><br><span class="line">                ? <span class="literal">false</span> </span><br><span class="line">                : (obj[<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, NaN, &#123;a: 1&#125;, &#123;b: 2&#125;]</span></span><br></pre></td></tr></table></figure>
<h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set</span></span><br><span class="line"><span class="comment"> * 优点：太简洁了！ </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;, NaN]</span></span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>特殊类型的比较</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1 == str2); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str1 === str2); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a/</span> == <span class="regexp">/a/</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/a/</span> === <span class="regexp">/a/</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; == &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; === &#123;&#125;); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>以上各种去重方法的比较（重点关注NaN和对象的去重情况）</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>双重循环</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>indexOf</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>sort</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>filter + indexOf</td>
<td>对象不去重 NaN 会被忽略掉</td>
</tr>
<tr>
<td>filter + sort</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>键值对</td>
<td><strong>对象 NaN 去重</strong></td>
</tr>
<tr>
<td>Set</td>
<td><strong>对象不去重 NaN 去重</strong></td>
</tr>
</tbody></table>
<h4 id="8-数组排序"><a href="#8-数组排序" class="headerlink" title="8. 数组排序"></a>8. 数组排序</h4><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><h5 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h5><h5 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h5><h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><h5 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h5><h5 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h5><h5 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h5><h5 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h5><h4 id="9-reduce方法"><a href="#9-reduce方法" class="headerlink" title="9. reduce方法"></a>9. reduce方法</h4><h4 id="10-数组扁平化"><a href="#10-数组扁平化" class="headerlink" title="10. 数组扁平化"></a>10. 数组扁平化</h4><h4 id="11-new操作符"><a href="#11-new操作符" class="headerlink" title="11. new操作符"></a>11. new操作符</h4><h4 id="12-JSON-stringify"><a href="#12-JSON-stringify" class="headerlink" title="12. JSON.stringify"></a>12. JSON.stringify</h4><h4 id="13-JSON-parse"><a href="#13-JSON-parse" class="headerlink" title="13. JSON.parse"></a>13. JSON.parse</h4><h4 id="14-函数柯里化"><a href="#14-函数柯里化" class="headerlink" title="14. 函数柯里化"></a>14. 函数柯里化</h4><h4 id="15-instanceOf"><a href="#15-instanceOf" class="headerlink" title="15. instanceOf"></a>15. instanceOf</h4><h4 id="16-Ajax请求"><a href="#16-Ajax请求" class="headerlink" title="16. Ajax请求"></a>16. Ajax请求</h4><h4 id="17-Class实现继承"><a href="#17-Class实现继承" class="headerlink" title="17. Class实现继承"></a>17. Class实现继承</h4><h4 id="18-Promise"><a href="#18-Promise" class="headerlink" title="18. Promise"></a>18. Promise</h4>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript面向对象编程</title>
    <url>/2020/06/11/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="一、理解对象"><a href="#一、理解对象" class="headerlink" title="一、理解对象"></a>一、理解对象</h3><h3 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h3><h4 id="2-1-工厂模式"><a href="#2-1-工厂模式" class="headerlink" title="2.1 工厂模式"></a>2.1 工厂模式</h4><h4 id="2-2-构造函数模式"><a href="#2-2-构造函数模式" class="headerlink" title="2.2 构造函数模式"></a>2.2 构造函数模式</h4><h4 id="2-3-原型模式"><a href="#2-3-原型模式" class="headerlink" title="2.3 原型模式"></a>2.3 原型模式</h4><h4 id="2-4-组合使用构造函数模式和原型模式"><a href="#2-4-组合使用构造函数模式和原型模式" class="headerlink" title="2.4 组合使用构造函数模式和原型模式"></a>2.4 组合使用构造函数模式和原型模式</h4><h4 id="2-5-动态原型模式"><a href="#2-5-动态原型模式" class="headerlink" title="2.5 动态原型模式"></a>2.5 动态原型模式</h4><h4 id="2-6-寄生构造函数模式"><a href="#2-6-寄生构造函数模式" class="headerlink" title="2.6 寄生构造函数模式"></a>2.6 寄生构造函数模式</h4><h4 id="2-7-稳妥构造函数模式"><a href="#2-7-稳妥构造函数模式" class="headerlink" title="2.7 稳妥构造函数模式"></a>2.7 稳妥构造函数模式</h4><h3 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h3><h4 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h4><h5 id="3-2-1-prototype"><a href="#3-2-1-prototype" class="headerlink" title="3.2.1 prototype"></a>3.2.1 prototype</h5><h5 id="3-2-2-proto"><a href="#3-2-2-proto" class="headerlink" title="3.2.2 __proto__"></a>3.2.2 __proto__</h5><h5 id="3-2-3-constructor"><a href="#3-2-3-constructor" class="headerlink" title="3.2.3 constructor"></a>3.2.3 constructor</h5><h5 id="3-2-4-原型链"><a href="#3-2-4-原型链" class="headerlink" title="3.2.4 原型链"></a>3.2.4 原型链</h5><p>所谓”构造函数”，其实就是一个普通函数，但是内部使用了<strong>this</strong>变量。对构造函数使用<strong>new</strong>运算符，就能生成实例，并且<strong>this</strong>变量会绑定在实例对象上。</p>
<h4 id="3-2-组合继承"><a href="#3-2-组合继承" class="headerlink" title="3.2 组合继承"></a>3.2 组合继承</h4><h4 id="3-3-原型链继承"><a href="#3-3-原型链继承" class="headerlink" title="3.3 原型链继承"></a>3.3 原型链继承</h4><h4 id="3-4-寄生式继承"><a href="#3-4-寄生式继承" class="headerlink" title="3.4 寄生式继承"></a>3.4 寄生式继承</h4><h4 id="3-5-寄生组合式继承"><a href="#3-5-寄生组合式继承" class="headerlink" title="3.5 寄生组合式继承"></a>3.5 寄生组合式继承</h4>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
