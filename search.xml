<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>手写jQuery方法系列</title>
    <url>/2020/06/14/%E6%89%8B%E5%86%99jQuery%E6%96%B9%E6%B3%95%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的安装和配置</title>
    <url>/2020/05/24/nginx%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试篇</title>
    <url>/2020/06/16/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%AF%87/</url>
    <content><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ul>
<li>viewport</li>
<li>元信息标签（head、title、meta）的作用</li>
<li>HTML5离线缓存原理</li>
</ul>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul>
<li>盒模型</li>
<li>说一说BFC</li>
<li>display和opacity的区别？</li>
<li>css选择器优先级确定</li>
<li>css伪类和伪元素</li>
<li>有哪些样式可以被继承？</li>
<li>什么是文档流？脱离文档流的方式都有哪些？它们有什么不同？</li>
<li>外边距折叠是什么意思？</li>
<li>水平垂直居中的方式有哪些？都有哪些优缺点？</li>
<li>绝对定位坐标的参考值是谁？宽度和高度的参考值又是谁？</li>
<li>清除浮动的方法有哪些？</li>
<li>css模块化方案？如何配置按需加载？如何防止css阻塞渲染？</li>
<li>postCss是什么？和Sass、Less、Stylus的异同？</li>
<li>如何使用css画一个三角形？</li>
<li>是否了解媒体查询？它的原理是什么？</li>
<li>逻辑像素和物理像素的区别？</li>
<li>响应式布局方案有哪些？</li>
<li>em 和 rem 这两种相对单位有什么不同？</li>
<li>什么是 css-reset？为什么要做 css-reset？</li>
<li>你平时写样式会遵从哪些规范？举几个例子</li>
</ul>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h4><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><ul>
<li>js数据类型有哪些？</li>
<li>typeof 能返回哪几种数据类型？</li>
<li>值类型和引用类型的区别？</li>
<li>深拷贝和浅拷贝的区别？</li>
<li>说一下常见的隐式类型转换</li>
<li>判断数据类型的方式有哪些？</li>
<li>如何准确判断数组类型？</li>
<li>出现小数精度丢失的原因？</li>
</ul>
<h5 id="原型-amp-原型链"><a href="#原型-amp-原型链" class="headerlink" title="原型&amp;原型链"></a>原型&amp;原型链</h5><ul>
<li>怎么理解原型设计模式？</li>
<li>js中的原型规则</li>
<li>说一说实现继承的几种方式以及它们的优缺点？</li>
<li>instanceof 的实现原理？手动实现instanceof</li>
<li>描述new一个对象的过程？手动实现一个new操作符</li>
</ul>
<h5 id="作用域-amp-闭包"><a href="#作用域-amp-闭包" class="headerlink" title="作用域&amp;闭包"></a>作用域&amp;闭包</h5><ul>
<li>词法作用域和动态作用域</li>
<li>怎么理解js的作用域和作用域链？</li>
<li>什么是js的执行上下文？</li>
<li>this的原理和不同场景下的取值</li>
<li>call、apply、bind</li>
<li>闭包是什么？开发中的应用场景？</li>
<li>堆栈溢出和内存泄漏的原理？如何防止？</li>
</ul>
<h5 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h5><ul>
<li>同步和异步的区别？</li>
<li>前端使用异步的场景有哪些？</li>
<li>详细描述Event Loop机制</li>
<li>js如何实现异步编程？</li>
<li>node与浏览器 Event Loop 的差异？</li>
<li>如何在保证页面运行流畅的情况下处理海量数据？</li>
</ul>
<h5 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h5><h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h5><ul>
<li>symbol</li>
<li>class</li>
<li>Promise</li>
</ul>
<h4 id="JS进阶"><a href="#JS进阶" class="headerlink" title="JS进阶"></a>JS进阶</h4><h5 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h5><h5 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h5><ul>
<li>手写简易ajax</li>
<li>ajax常用插件</li>
</ul>
<h5 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h5><ul>
<li>事件节流和防抖的区别？</li>
</ul>
<h5 id="web安全"><a href="#web安全" class="headerlink" title="web安全"></a>web安全</h5><ul>
<li>常见的web前端攻击方式有哪些？</li>
</ul>
<h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><ul>
<li>前端常用的设计模式有哪些？</li>
<li>发布订阅者模式和观察者模式的异同以及实际应用</li>
<li>说出几种设计模式在开发中的实际应用</li>
</ul>
<h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><h5 id="git"><a href="#git" class="headerlink" title="git"></a>git</h5><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><ul>
<li>linux常用命令有哪些？</li>
</ul>
<h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><h5 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h5><p><strong>HTTP</strong></p>
<ul>
<li>从输入一个url到整个页面渲染的过程？</li>
<li>怎么理解多进程的浏览器和多线程的浏览器内核？</li>
<li>DNS的作用？DNS解析的详细过程？DNS优化？</li>
<li>说一下三次握手和四次挥手的详细过程？为什么要使用这种机制？</li>
<li>get、post的区别？</li>
<li>介绍一下TCP/IP的五层模型及对应协议</li>
<li>HTTP请求报文和响应报文的具体组成？说一说常见的请求头和响应头</li>
<li>HTTP请求有哪些请求方法？区别是什么？</li>
<li>HTTP常见的状态码有哪些？都代表什么含义？它们的作用是什么？</li>
<li>什么是负载均衡？</li>
<li>什么是同源策略？怎么解决跨域？</li>
<li>说一说cookie</li>
<li>了解HTTP2.0吗？</li>
<li>HTTPS的加密原理？如何开启HTTPS？</li>
<li>HTTP缓存</li>
<li>WebSocket协议的底层原理？与HTTP的区别？</li>
</ul>
<p><strong>DOM</strong><br><strong>BOM</strong></p>
<ul>
<li>如何识别浏览器的类型</li>
</ul>
<p><strong>存储</strong></p>
<ul>
<li>cookie、localstorage、sessionstorage的区别？</li>
</ul>
<h5 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h5><h3 id="框架和类库"><a href="#框架和类库" class="headerlink" title="框架和类库"></a>框架和类库</h3><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><ul>
<li><strong>说说你对Vue源码有哪些研究？</strong></li>
</ul>
<blockquote>
<p><span class="pink">1.了解了一个vue实例的初始化过程</span><br>new Vue() &gt;&gt; 调用_init方法完成初始化data、props、computed等 &gt;&gt; 调用实例的$mount方法挂载实例（挂载的目标就是把模板渲染成最终的DOM）<br>挂载过程：调用实例的_render方法（用来将实例渲染成虚拟Node）&gt;&gt; 调用实例的_update方法（在update里调用patch方法将VNode渲染成真正的DOM）<br><span class="pink">2.组件化</span><br>通过createComponent创建组件VNode &gt;&gt; 执行patch方法将VNode转换成真正的DOM节点（patch最后执行insert方法完成组件DOM的插入，如果patch过程中又创建了子组件，那么DOM的插入顺序是先子后父）<br>组件注册：全局注册和局部注册<br>异步组件：异步组件实现的本质是 2 次渲染，除了 0 delay 的高级异步组件第一次直接渲染成 loading 组件外，其它都是第一次渲染生成一个注释节点，当异步获取组件成功后，再通过 forceRender 强制重新渲染，这样就能正确渲染出我们异步加载的组件了。<br><span class="pink">3.响应式原理</span><br><span class="pink">4.模板编译</span><br><span class="pink">5.还有一些内置组件的实现（slot、keep-alive、transition、transition-group） </span></p>
</blockquote>
<ul>
<li><strong>Vue实现双向绑定的原理？</strong></li>
</ul>
<blockquote>
<p><span class="pink">采用数据劫持结合发布-订阅者模式的方式，通过ES5的Object.defineProperty()方法来给各个属性添加getter和setter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要由4个部分实现，一个是Observer监听器，用来劫持和监听属性。第二个是Compile指令解析器，它有两个作用，一个是初始化渲染页面，将模板中的变量都替换成数据。第二个作用是绑定更新函数以便在数据变动时相应的订阅者执行更新。第三个部分是Watcher订阅者，它是连接Observer和Compile的桥梁，主要的任务是用来派发更新。第四个部分是Dep订阅器 ，它是依赖收集的核心，用来管理Watcher订阅者，当触发setter时，通知相应的订阅者做相应的逻辑处理。</span></p>
</blockquote>
<ul>
<li><strong>Vue组件间的通信有哪些方式？</strong></li>
</ul>
<blockquote>
<p><span class="pink">（1）props / $emit 适用 父子组件通信</span><br><span class="pink">（2）ref 与 $parent / $children 适用 父子组件通信</span><br>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例<br>$parent / $children：访问父 / 子实例<br><span class="pink">（3）EventBus （$emit / $on） 适用于 父子、隔代、兄弟组件通信</span><br>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。<br><span class="pink">（4）Vuex 适用于 父子、隔代、兄弟组件通信</span><br><span class="pink">（5）slot 作用域插槽</span><br>子组件内的数据可以被父组件拿到。在父作用域中使用v-slot定义插槽prop。</p>
</blockquote>
<ul>
<li><strong>组件中 data 为什么是一个函数？</strong></li>
</ul>
<blockquote>
<p><span class="pink">每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响</span></p>
</blockquote>
<ul>
<li><strong>v-show 与 v-if 有什么区别？</strong></li>
</ul>
<blockquote>
<p><span class="pink">v-if 是“真正”的条件渲染。而v-show只是简单地基于 CSS（display）进行切换。</span></p>
</blockquote>
<ul>
<li><strong>Vue的两个核心是？</strong></li>
</ul>
<blockquote>
<p><span class="pink">数据驱动和组件化</span></p>
</blockquote>
<ul>
<li><strong>如何解决初始化页面闪动的问题？</strong></li>
</ul>
<blockquote>
<p><span class="pink">使用v-clock指令，它会在Vue实例结束编译时从绑定的HTML元素上移除（配合display:none使用）</span></p>
</blockquote>
<ul>
<li><strong>computed 和 watch 的区别？</strong></li>
</ul>
<blockquote>
<span class="pink">
computed：是计算属性，依赖其它属性值，并且 computed 的值有缓存，在依赖的数据发生变化时会重新计算。不能执行异步任务。
wacth：更多的是「观察」的作用。观察的是属性值，只要属性值发生变化，就会触发执行回调函数进行一系列操作。
总结：computed能实现的，watch都能实现。能用computed的尽量用computed！</span>
</blockquote>
<ul>
<li><strong>虚拟 DOM 实现原理及优缺点？</strong></li>
</ul>
<blockquote>
<p><span class="pink">虚拟 DOM 的实现原理主要包括以下 3 部分：</span></p>
<ol>
<li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</li>
<li>diff 算法 — 比较两棵虚拟 DOM 树的差异；</li>
<li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</li>
</ol>
</blockquote>
<blockquote>
<p><span class="pink">优点：</span></p>
<ol>
<li>保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；</li>
<li>无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；</li>
<li>跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</li>
</ol>
</blockquote>
<blockquote>
<p><span class="pink">缺点:</span></p>
<ol>
<li>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</li>
</ol>
</blockquote>
<ul>
<li><strong>v-model 的原理？</strong></li>
<li><strong>Vue 中的 key 有什么作用？</strong></li>
<li><strong>谈谈你对 keep-alive 的了解？</strong></li>
<li><strong>怎样理解 Vue 的单向数据流？</strong></li>
<li><strong>使用过 Vue SSR 吗？说说 SSR？</strong></li>
<li><strong>说说你对MVVM的理解</strong></li>
<li><strong>说说 Vue 与 Angular 以及 React 区别</strong></li>
<li><strong>说说你对 SPA 单页面的理解，它的优缺点分别是什么？</strong></li>
<li><strong>你有对 Vue 项目进行哪些优化？</strong></li>
<li><strong>对于 vue3.0 有什么了解的吗？</strong></li>
</ul>
<p><strong>Vue生命周期</strong></p>
<ul>
<li>Vue生命周期是什么？</li>
<li>说一下每个生命周期的作用？</li>
<li>第一次页面加载会触发哪几个钩子？</li>
<li>Vue 的父组件和子组件生命周期钩子函数执行顺序？</li>
<li>在哪个生命周期内调用异步请求？</li>
<li>在什么阶段才能访问操作DOM？</li>
<li>父组件可以监听到子组件的生命周期吗？</li>
</ul>
<p><strong>Vue-Router</strong></p>
<ul>
<li>Vue-router 有几种路由模式？它们的实现原理是什么？</li>
<li>Vue-router的钩子函数（导航守卫）有哪些？</li>
<li>$route和$router的区别？</li>
<li>怎么定义嵌套路由？</li>
<li>怎么实现动态路由匹配？</li>
<li>怎么实现路由懒加载？</li>
<li>params和query都可以用来传参，区别是什么？</li>
<li>active-class是哪个组件的属性？</li>
<li>Vue-router如何响应路由参数的变化？</li>
<li>完整的 vue-router 导航解析流程？</li>
</ul>
<p><strong>Vuex</strong></p>
<ul>
<li>Vuex是什么？怎么使用？应用场景有哪些？</li>
<li>Vuex和单纯的全局对象的区别？</li>
</ul>
<h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><h4 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h4><h3 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h3><h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><ul>
<li>说一说都有哪些数据结构？</li>
<li>各种排序算法的实现原理？应用场景？</li>
<li>递归的优缺点？应用场景？</li>
<li>回溯算法</li>
<li>贪心算法</li>
<li>分治算法</li>
<li>动态规划</li>
</ul>
<h3 id="项目与业务"><a href="#项目与业务" class="headerlink" title="项目与业务"></a>项目与业务</h3>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习书签</title>
    <url>/2020/06/12/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%A6%E7%AD%BE/</url>
    <content><![CDATA[<h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><h4 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h4><h4 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h4><h4 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h4><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><h4 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h4><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4>]]></content>
      <tags>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解JavaScript系列</title>
    <url>/2020/06/14/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h4 id="1、数据类型与深拷贝、浅拷贝"><a href="#1、数据类型与深拷贝、浅拷贝" class="headerlink" title="1、数据类型与深拷贝、浅拷贝"></a>1、数据类型与深拷贝、浅拷贝</h4>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript面向对象编程</title>
    <url>/2020/06/11/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="一、理解对象"><a href="#一、理解对象" class="headerlink" title="一、理解对象"></a>一、理解对象</h3><h3 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h3><h4 id="2-1-工厂模式"><a href="#2-1-工厂模式" class="headerlink" title="2.1 工厂模式"></a>2.1 工厂模式</h4><h4 id="2-2-构造函数模式"><a href="#2-2-构造函数模式" class="headerlink" title="2.2 构造函数模式"></a>2.2 构造函数模式</h4><h4 id="2-3-原型模式"><a href="#2-3-原型模式" class="headerlink" title="2.3 原型模式"></a>2.3 原型模式</h4><h4 id="2-4-组合使用构造函数模式和原型模式"><a href="#2-4-组合使用构造函数模式和原型模式" class="headerlink" title="2.4 组合使用构造函数模式和原型模式"></a>2.4 组合使用构造函数模式和原型模式</h4><h4 id="2-5-动态原型模式"><a href="#2-5-动态原型模式" class="headerlink" title="2.5 动态原型模式"></a>2.5 动态原型模式</h4><h4 id="2-6-寄生构造函数模式"><a href="#2-6-寄生构造函数模式" class="headerlink" title="2.6 寄生构造函数模式"></a>2.6 寄生构造函数模式</h4><h4 id="2-7-稳妥构造函数模式"><a href="#2-7-稳妥构造函数模式" class="headerlink" title="2.7 稳妥构造函数模式"></a>2.7 稳妥构造函数模式</h4><h3 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h3><h4 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h4><h5 id="3-2-1-prototype"><a href="#3-2-1-prototype" class="headerlink" title="3.2.1 prototype"></a>3.2.1 prototype</h5><h5 id="3-2-2-proto"><a href="#3-2-2-proto" class="headerlink" title="3.2.2 __proto__"></a>3.2.2 __proto__</h5><h5 id="3-2-3-constructor"><a href="#3-2-3-constructor" class="headerlink" title="3.2.3 constructor"></a>3.2.3 constructor</h5><h5 id="3-2-4-原型链"><a href="#3-2-4-原型链" class="headerlink" title="3.2.4 原型链"></a>3.2.4 原型链</h5><p>所谓”构造函数”，其实就是一个普通函数，但是内部使用了<strong>this</strong>变量。对构造函数使用<strong>new</strong>运算符，就能生成实例，并且<strong>this</strong>变量会绑定在实例对象上。</p>
<h4 id="3-2-组合继承"><a href="#3-2-组合继承" class="headerlink" title="3.2 组合继承"></a>3.2 组合继承</h4><h4 id="3-3-原型链继承"><a href="#3-3-原型链继承" class="headerlink" title="3.3 原型链继承"></a>3.3 原型链继承</h4><h4 id="3-4-寄生式继承"><a href="#3-4-寄生式继承" class="headerlink" title="3.4 寄生式继承"></a>3.4 寄生式继承</h4><h4 id="3-5-寄生组合式继承"><a href="#3-5-寄生组合式继承" class="headerlink" title="3.5 寄生组合式继承"></a>3.5 寄生组合式继承</h4>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>手写JS系列</title>
    <url>/2020/06/12/%E6%89%8B%E5%86%99JS%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h4 id="1-bind"><a href="#1-bind" class="headerlink" title="1. bind"></a>1. bind</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><blockquote>
<p>bind() 创建一个新函数，叫<strong>绑定函数</strong>（bound function，BF），在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p>
</blockquote>
<a id="more"></a>
<h5 id="简单版"><a href="#简单版" class="headerlink" title="简单版"></a>简单版</h5><p>按照bind函数的定义，我们可以实现一个简单版本的bind如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写bind函数(简单版)</span></span><br><span class="line"><span class="comment"> * 1、返回一个新函数</span></span><br><span class="line"><span class="comment"> * 2、新函数的this被指定为bind的第一个参数</span></span><br><span class="line"><span class="comment"> * 3、bind的其余参数作为新函数的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - '</span> + <span class="string">'what is trying to be bound is not callable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(oThis, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成了一个简单版本的bind函数，它适用于大多数场景。但是有一个例外，MDN上对绑定函数有如下描述</p>
<blockquote>
<p>绑定函数也可以使用 new 运算符构造，它会表现为目标函数已经被构建完毕了似的。<span class="pink">提供的 this 值会被忽略</span>，但前置参数仍会提供给模拟函数。</p>
</blockquote>
<p>显然上面的bind函数没有实现这样的功能，因为它始终会改变绑定函数的this指向。因此我们需要对它做一些修改。</p>
<h5 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写bind函数(进阶版)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - '</span> + <span class="string">'what is trying to be bound is not callable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 检测是否使用new来调用绑定函数fBound</span></span><br><span class="line">    <span class="comment">// 如果是，this就指向其实例；如果不是，this就指向指定的oThis</span></span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span> <span class="keyword">instanceof</span> self ? <span class="keyword">this</span> : oThis</span><br><span class="line">    <span class="keyword">return</span> self.apply(_this, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.prototype) &#123;</span><br><span class="line">    fBound.prototype = <span class="keyword">this</span>.prototype</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试bind</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> Cat = Animal.bind(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tom = <span class="keyword">new</span> Cat(<span class="string">'tom'</span>) <span class="comment">// 此时this指向的是tom实例，而不是指定的obj</span></span><br><span class="line"><span class="built_in">console</span>.log(tom.name)  <span class="comment">// tom</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name)  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>看起来已经实现了我们想要的功能，由于我们设置了Cat.prototype = Animal.prototype，因此new Cat()生成的tom对象既是Cat的实例，也是Animal的实例（即<span class="pink">tom.__proto__ === Cat.prototype === Animal.prototype</span>）所以<span class="pink">tom instanceof Animal</span>为true，所以此时this指向tom实例而不是指定的obj对象。但是还有一个问题，这种直接赋值原型对象的写法会存在一个隐患，即修改其中一个原型，另一个也会受影响。因此我们需要引入一个“中间人”来避免这个问题。</p>
<h5 id="终极版"><a href="#终极版" class="headerlink" title="终极版"></a>终极版</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写bind函数(终极版)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - '</span> + <span class="string">'what is trying to be bound is not callable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> fNOP = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 引入中间函数fNOP来保存原函数的原型</span></span><br><span class="line">  <span class="keyword">let</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span> <span class="keyword">instanceof</span> self ? <span class="keyword">this</span> : oThis</span><br><span class="line">    <span class="keyword">return</span> self.apply(_this, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.prototype) &#123;</span><br><span class="line">    fNOP.prototype = <span class="keyword">this</span>.prototype</span><br><span class="line">  &#125;</span><br><span class="line">  fBound.prototype = <span class="keyword">new</span> fNOP() <span class="comment">// 修改绑定函数的原型</span></span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时绑定函数的原型对象就是原函数的一个实例，修改fBound.prototype不会对原函数的原型有任何影响。这就是bind的完整实现。</p>
<h4 id="2-call、apply"><a href="#2-call、apply" class="headerlink" title="2. call、apply"></a>2. call、apply</h4><h5 id="call"><a href="#call" class="headerlink" title="call"></a>call</h5><p><strong>定义</strong></p>
<blockquote>
<p>call() 方法在使用一个指定的 this 值和若干个指定的参数值的前提下调用某个函数或方法。</p>
</blockquote>
<p><strong>实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写call函数</span></span><br><span class="line"><span class="comment"> * 1、将函数设置为对象属性</span></span><br><span class="line"><span class="comment"> * 2、调用函数</span></span><br><span class="line"><span class="comment"> * 3、删除属性</span></span><br><span class="line"><span class="comment"> * 4、处理thisArg参数（thisArg可以指定为null，为null时指向全局对象window）</span></span><br><span class="line"><span class="comment"> * 5、处理其余参数</span></span><br><span class="line"><span class="comment"> * 6、处理有返回值的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg</span>) </span>&#123;</span><br><span class="line">  thisArg = thisArg || <span class="built_in">window</span></span><br><span class="line">  thisArg.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">    args.push(<span class="string">'arguments['</span>+ i +<span class="string">']'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">eval</span>(<span class="string">'thisArg.fn('</span>+ args +<span class="string">')'</span>)</span><br><span class="line">  <span class="keyword">delete</span> thisArg.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h5><p><strong>定义</strong></p>
<blockquote>
<p>apply() 方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。</p>
</blockquote>
<p><strong>实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply2 = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg, arr</span>) </span>&#123;</span><br><span class="line">  thisArg = thisArg || <span class="built_in">window</span></span><br><span class="line">  thisArg.fn = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> result</span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    result = thisArg.fn()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">      args.push(<span class="string">'arr['</span>+ i +<span class="string">']'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">'thisArg.fn('</span>+ args +<span class="string">')'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> thisArg.fn</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class='pink'>注意：call()方法的作用和apply()方法类似，区别就是call()方法接受的是参数列表，而apply()方法接受的是一个参数数组。</span></p>
</blockquote>
<h4 id="3-节流"><a href="#3-节流" class="headerlink" title="3. 节流"></a>3. 节流</h4><p>在前端开发中会遇到一些频繁触发的事件，比如：</p>
<ul>
<li>windows的resize、scroll</li>
<li>mousedown、mousemove</li>
<li>keydown、keyup</li>
<li>ajax请求等</li>
</ul>
<p>如果在这些事件中进行复杂的操作，或者消耗性能的操作（如DOM操作），其高频的触发可能会造成浏览器卡顿，甚至崩溃。为了解决这个问题，一般有以下两种解决方案：</p>
<ol>
<li>节流（throttle） </li>
<li>防抖（debounce）</li>
</ol>
<p>我们首先来看看节流的实现。</p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>节流的原理是一定时间内事件只执行一次。通过判断是否到达一定时间来触发事件。主要有两种实现方法：时间戳和定时器。</p>
<h5 id="时间戳实现"><a href="#时间戳实现" class="headerlink" title="时间戳实现"></a>时间戳实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流(时间戳)</span></span><br><span class="line"><span class="comment"> * 1. this</span></span><br><span class="line"><span class="comment"> * 2. 参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args</span><br><span class="line">  <span class="keyword">var</span> previous = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      previous = now</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="定时器实现"><a href="#定时器实现" class="headerlink" title="定时器实现"></a>定时器实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流（定时器）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer, context, args</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对比两种实现方法发现</p>
<ol>
<li>第一种事件会立即执行，第二种事件会等待wait秒后执行第一次。</li>
<li>第一种事件停止触发后没有办法再执行事件，第二种事件停止触发后还会再执行一次。</li>
</ol>
<h5 id="定时器-时间戳"><a href="#定时器-时间戳" class="headerlink" title="定时器+时间戳"></a>定时器+时间戳</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流（定时器+时间戳）</span></span><br><span class="line"><span class="comment"> * 1. 根据options参数决定首次是否立即执行，结束触发后是否再执行一次</span></span><br><span class="line"><span class="comment"> * leading: false 表示禁用首次立即执行</span></span><br><span class="line"><span class="comment"> * trailing: false 表示禁用停止触发</span></span><br><span class="line"><span class="comment"> * 2. 增加cancel方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args, timer</span><br><span class="line">  <span class="keyword">var</span> previous = <span class="number">0</span></span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    previous = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    func.apply(context, args)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> throttled = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">var</span> remaining = wait - (now - previous) <span class="comment">// 下一次触发事件剩余的时间</span></span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123; <span class="comment">// 没有了剩余时间或者修改了系统时间</span></span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      previous = now</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">      timer = setTimeout(later, remaining)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  throttled.cancel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    previous = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> throttled</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-防抖"><a href="#4-防抖" class="headerlink" title="4. 防抖"></a>4. 防抖</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>防抖的原理是事件触发n秒后执行，如果期间再有事件触发，则以新的触发事件为准，n秒后再执行。</p>
<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖debounce(func, wait, [immediate])</span></span><br><span class="line"><span class="comment"> * 1. this</span></span><br><span class="line"><span class="comment"> * 2. 参数</span></span><br><span class="line"><span class="comment"> * 3. 首次立即执行</span></span><br><span class="line"><span class="comment"> * 4. 返回值</span></span><br><span class="line"><span class="comment"> * 5. 增加cancel方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args, timer, result</span><br><span class="line">  <span class="keyword">const</span> debounced = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    context = <span class="keyword">this</span></span><br><span class="line">    args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (timer) clearTimeout(timer)</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="keyword">var</span> callNow = !timer</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">      <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">        result = func.apply(context, args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        func.apply(context, args)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  debounced.concel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timer)</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-深拷贝"><a href="#5-深拷贝" class="headerlink" title="5. 深拷贝"></a>5. 深拷贝</h4><h5 id="JSON-parse-JSON-stringify-obj"><a href="#JSON-parse-JSON-stringify-obj" class="headerlink" title="JSON.parse(JSON.stringify(obj))"></a>JSON.parse(JSON.stringify(obj))</h5><blockquote>
<p><span class="pink">JSON.parse(JSON.stringify(obj))</span> 方法可以用来深拷贝一个数组或对象，但是<strong>undefined、函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。</strong></p>
</blockquote>
<h5 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> || <span class="keyword">typeof</span> obj === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj <span class="comment">// 如果不是引用类型，或者为null，直接返回</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> res = obj <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123; <span class="comment">// 保证不是原型上的属性</span></span><br><span class="line">      res[key] = deepClone(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6-深度比较"><a href="#6-深度比较" class="headerlink" title="6. 深度比较"></a>6. 深度比较</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深度比较（简单版）</span></span><br><span class="line"><span class="comment"> * 1. 判断是不是同一个对象</span></span><br><span class="line"><span class="comment"> * 2. 判断属性个数是否一致</span></span><br><span class="line"><span class="comment"> * 3. 比较对应位置上的属性是否相等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj1 !== <span class="string">'object'</span> || <span class="keyword">typeof</span> obj2 !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj1 === obj2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj1 === obj2) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">var</span> obj1_keys = <span class="built_in">Object</span>.keys(obj1)</span><br><span class="line">  <span class="keyword">var</span> obj2_keys = <span class="built_in">Object</span>.keys(obj2)</span><br><span class="line">  <span class="keyword">if</span> (obj1_keys.length !== obj2_keys.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = isEqual(obj1[key], obj2[key])</span><br><span class="line">    <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7-数组去重"><a href="#7-数组去重" class="headerlink" title="7. 数组去重"></a>7. 数组去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="string">'str'</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>]</span><br></pre></td></tr></table></figure>
<h5 id="双重循环"><a href="#双重循环" class="headerlink" title="双重循环"></a>双重循环</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重循环</span></span><br><span class="line"><span class="comment"> * 优点：兼容性好</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arrLen = arr.length; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, resLen = res.length; j &lt; resLen; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === res[j]) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j === resLen) &#123;</span><br><span class="line">      res.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;, NaN, NaN]</span></span><br></pre></td></tr></table></figure>
<h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * indexOf</span></span><br><span class="line"><span class="comment"> * 优点：简化内层循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arrLen = arr.length; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.indexOf(arr[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">      res.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;, NaN, NaN]</span></span><br></pre></td></tr></table></figure>
<h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sort</span></span><br><span class="line"><span class="comment"> * 优点：对于已排好序的数组去重效率比较高</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = []</span><br><span class="line">  <span class="keyword">var</span> sortedArr = arr.concat().sort()</span><br><span class="line">  res.push(sortedArr[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>, len = sortedArr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sortedArr[i] !== sortedArr[i<span class="number">-1</span>]) &#123;</span><br><span class="line">      res.push(sortedArr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", NaN, NaN, &#123;&#125;, &#123;&#125;, null, "str", true, undefined]</span></span><br></pre></td></tr></table></figure>
<h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter + indexOf</span></span><br><span class="line"><span class="comment"> * 优点：简化外层循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter + 排序</span></span><br><span class="line"><span class="comment"> * 优点：简化外层循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res = arr.concat().sort().filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !index || item !== arr[index - <span class="number">1</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", NaN, NaN, &#123;&#125;, &#123;&#125;, null, "str", true, undefined]</span></span><br></pre></td></tr></table></figure>
<h5 id="Object键值对"><a href="#Object键值对" class="headerlink" title="Object键值对"></a>Object键值对</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主要利用对象的key值不能重复的特点</span></span><br><span class="line"><span class="comment"> * 优点：可以去掉重复的&#123;&#125; 和 NaN</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="string">'str'</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.hasOwnProperty(item) ? <span class="literal">false</span> : ( obj[item] = <span class="literal">true</span> )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "str", true, undefined, null, &#123;&#125;, NaN]</span></span><br></pre></td></tr></table></figure>
<p>如果细心观察，我们会发现上面的方法存在两个问题：</p>
<ol>
<li><span class="pink"> 1 </span>和<span class="pink">‘1’</span>在这个方法中被判断为相同。</li>
<li>无法正确区分出两个对象。</li>
</ol>
<p>问题一是因为对象的key值只能是字符串的原因。可以使用<span class="pink"> typeof item + item </span>拼接成字符串作为key值来避免这个问题。<br>问题二是因为<span class="pink"> typeof item + item </span>的结果都会是<span class="pink"> object[object Object]</span>。所以无法区分两个对象。可以使用<span class="pink"> JSON.stringify </span>将对象序列化后再拼接上typeof item来解决这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化后的键值对方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.hasOwnProperty(<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)) </span><br><span class="line">                ? <span class="literal">false</span> </span><br><span class="line">                : (obj[<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, NaN, &#123;a: 1&#125;, &#123;b: 2&#125;]</span></span><br></pre></td></tr></table></figure>
<h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set</span></span><br><span class="line"><span class="comment"> * 优点：太简洁了！ </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(unique(arr)) <span class="comment">// [1, "1", "str", true, undefined, null, &#123;&#125;, &#123;&#125;, NaN]</span></span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>以上各种去重方法的比较（重点关注NaN和对象的去重情况）</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>双重循环</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>indexOf</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>sort</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>filter + indexOf</td>
<td>对象不去重 NaN 会被忽略掉</td>
</tr>
<tr>
<td>filter + sort</td>
<td>对象和 NaN 不去重</td>
</tr>
<tr>
<td>键值对</td>
<td><strong>对象 NaN 去重</strong></td>
</tr>
<tr>
<td>Set</td>
<td><strong>对象不去重 NaN 去重</strong></td>
</tr>
</tbody></table>
<h4 id="8-reduce方法"><a href="#8-reduce方法" class="headerlink" title="8. reduce方法"></a>8. reduce方法</h4><h4 id="9-数组扁平化"><a href="#9-数组扁平化" class="headerlink" title="9. 数组扁平化"></a>9. 数组扁平化</h4><h4 id="10-new操作符"><a href="#10-new操作符" class="headerlink" title="10. new操作符"></a>10. new操作符</h4><h4 id="11-JSON-stringify"><a href="#11-JSON-stringify" class="headerlink" title="11. JSON.stringify"></a>11. JSON.stringify</h4><h4 id="12-JSON-parse"><a href="#12-JSON-parse" class="headerlink" title="12. JSON.parse"></a>12. JSON.parse</h4><h4 id="13-函数柯里化"><a href="#13-函数柯里化" class="headerlink" title="13. 函数柯里化"></a>13. 函数柯里化</h4><h4 id="14-instanceOf"><a href="#14-instanceOf" class="headerlink" title="14. instanceOf"></a>14. instanceOf</h4><h4 id="15-Class实现继承"><a href="#15-Class实现继承" class="headerlink" title="15. Class实现继承"></a>15. Class实现继承</h4><h4 id="16-Promise"><a href="#16-Promise" class="headerlink" title="16. Promise"></a>16. Promise</h4><h4 id="17-async、await"><a href="#17-async、await" class="headerlink" title="17. async、await"></a>17. async、await</h4><h4 id="18-sleep函数"><a href="#18-sleep函数" class="headerlink" title="18. sleep函数"></a>18. sleep函数</h4><h4 id="19-EventEmitter"><a href="#19-EventEmitter" class="headerlink" title="19. EventEmitter"></a>19. EventEmitter</h4><h4 id="20-模板引擎"><a href="#20-模板引擎" class="headerlink" title="20. 模板引擎"></a>20. 模板引擎</h4><h4 id="21-懒加载、下拉刷新、上拉加载、预加载"><a href="#21-懒加载、下拉刷新、上拉加载、预加载" class="headerlink" title="21. 懒加载、下拉刷新、上拉加载、预加载"></a>21. 懒加载、下拉刷新、上拉加载、预加载</h4>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
